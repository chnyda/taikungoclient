/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@itera.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// FlavorsApiService FlavorsApi service
type FlavorsApiService service

type ApiFlavorsAwsFlavorsRequest struct {
	ctx context.Context
	ApiService *FlavorsApiService
	cloudId int32
	v string
	offset *int32
	limit *int32
	startRam *float64
	endRam *float64
	startCpu *int32
	endCpu *int32
	search *string
	sortBy *string
	sortDirection *string
}

// Skip elements
func (r ApiFlavorsAwsFlavorsRequest) Offset(offset int32) ApiFlavorsAwsFlavorsRequest {
	r.offset = &offset
	return r
}

// Limits size (by default 50)
func (r ApiFlavorsAwsFlavorsRequest) Limit(limit int32) ApiFlavorsAwsFlavorsRequest {
	r.limit = &limit
	return r
}

func (r ApiFlavorsAwsFlavorsRequest) StartRam(startRam float64) ApiFlavorsAwsFlavorsRequest {
	r.startRam = &startRam
	return r
}

func (r ApiFlavorsAwsFlavorsRequest) EndRam(endRam float64) ApiFlavorsAwsFlavorsRequest {
	r.endRam = &endRam
	return r
}

func (r ApiFlavorsAwsFlavorsRequest) StartCpu(startCpu int32) ApiFlavorsAwsFlavorsRequest {
	r.startCpu = &startCpu
	return r
}

func (r ApiFlavorsAwsFlavorsRequest) EndCpu(endCpu int32) ApiFlavorsAwsFlavorsRequest {
	r.endCpu = &endCpu
	return r
}

func (r ApiFlavorsAwsFlavorsRequest) Search(search string) ApiFlavorsAwsFlavorsRequest {
	r.search = &search
	return r
}

func (r ApiFlavorsAwsFlavorsRequest) SortBy(sortBy string) ApiFlavorsAwsFlavorsRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiFlavorsAwsFlavorsRequest) SortDirection(sortDirection string) ApiFlavorsAwsFlavorsRequest {
	r.sortDirection = &sortDirection
	return r
}

func (r ApiFlavorsAwsFlavorsRequest) Execute() (*AwsFlavorList, *http.Response, error) {
	return r.ApiService.FlavorsAwsFlavorsExecute(r)
}

/*
FlavorsAwsFlavors Retrieve aws flavors

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cloudId
 @param v
 @return ApiFlavorsAwsFlavorsRequest
*/
func (a *FlavorsApiService) FlavorsAwsFlavors(ctx context.Context, cloudId int32, v string) ApiFlavorsAwsFlavorsRequest {
	return ApiFlavorsAwsFlavorsRequest{
		ApiService: a,
		ctx: ctx,
		cloudId: cloudId,
		v: v,
	}
}

// Execute executes the request
//  @return AwsFlavorList
func (a *FlavorsApiService) FlavorsAwsFlavorsExecute(r ApiFlavorsAwsFlavorsRequest) (*AwsFlavorList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AwsFlavorList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorsApiService.FlavorsAwsFlavors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v{v}/Flavors/aws/{cloudId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cloudId"+"}", url.PathEscape(parameterValueToString(r.cloudId, "cloudId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"v"+"}", url.PathEscape(parameterValueToString(r.v, "v")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.startRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startRam", r.startRam, "")
	}
	if r.endRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endRam", r.endRam, "")
	}
	if r.startCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startCpu", r.startCpu, "")
	}
	if r.endCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endCpu", r.endCpu, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortDirection", r.sortDirection, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlavorsAzureFlavorsRequest struct {
	ctx context.Context
	ApiService *FlavorsApiService
	cloudId int32
	v string
	offset *int32
	limit *int32
	startRam *int32
	endRam *int32
	startCpu *int32
	endCpu *int32
	search *string
	sortBy *string
	sortDirection *string
}

// Skip elements
func (r ApiFlavorsAzureFlavorsRequest) Offset(offset int32) ApiFlavorsAzureFlavorsRequest {
	r.offset = &offset
	return r
}

// Limits size (by default 50)
func (r ApiFlavorsAzureFlavorsRequest) Limit(limit int32) ApiFlavorsAzureFlavorsRequest {
	r.limit = &limit
	return r
}

func (r ApiFlavorsAzureFlavorsRequest) StartRam(startRam int32) ApiFlavorsAzureFlavorsRequest {
	r.startRam = &startRam
	return r
}

func (r ApiFlavorsAzureFlavorsRequest) EndRam(endRam int32) ApiFlavorsAzureFlavorsRequest {
	r.endRam = &endRam
	return r
}

func (r ApiFlavorsAzureFlavorsRequest) StartCpu(startCpu int32) ApiFlavorsAzureFlavorsRequest {
	r.startCpu = &startCpu
	return r
}

func (r ApiFlavorsAzureFlavorsRequest) EndCpu(endCpu int32) ApiFlavorsAzureFlavorsRequest {
	r.endCpu = &endCpu
	return r
}

func (r ApiFlavorsAzureFlavorsRequest) Search(search string) ApiFlavorsAzureFlavorsRequest {
	r.search = &search
	return r
}

func (r ApiFlavorsAzureFlavorsRequest) SortBy(sortBy string) ApiFlavorsAzureFlavorsRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiFlavorsAzureFlavorsRequest) SortDirection(sortDirection string) ApiFlavorsAzureFlavorsRequest {
	r.sortDirection = &sortDirection
	return r
}

func (r ApiFlavorsAzureFlavorsRequest) Execute() (*AzureFlavorList, *http.Response, error) {
	return r.ApiService.FlavorsAzureFlavorsExecute(r)
}

/*
FlavorsAzureFlavors Retrieve azure flavors

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cloudId
 @param v
 @return ApiFlavorsAzureFlavorsRequest
*/
func (a *FlavorsApiService) FlavorsAzureFlavors(ctx context.Context, cloudId int32, v string) ApiFlavorsAzureFlavorsRequest {
	return ApiFlavorsAzureFlavorsRequest{
		ApiService: a,
		ctx: ctx,
		cloudId: cloudId,
		v: v,
	}
}

// Execute executes the request
//  @return AzureFlavorList
func (a *FlavorsApiService) FlavorsAzureFlavorsExecute(r ApiFlavorsAzureFlavorsRequest) (*AzureFlavorList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AzureFlavorList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorsApiService.FlavorsAzureFlavors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v{v}/Flavors/azure/{cloudId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cloudId"+"}", url.PathEscape(parameterValueToString(r.cloudId, "cloudId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"v"+"}", url.PathEscape(parameterValueToString(r.v, "v")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.startRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startRam", r.startRam, "")
	}
	if r.endRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endRam", r.endRam, "")
	}
	if r.startCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startCpu", r.startCpu, "")
	}
	if r.endCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endCpu", r.endCpu, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortDirection", r.sortDirection, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlavorsBindToProjectRequest struct {
	ctx context.Context
	ApiService *FlavorsApiService
	v string
	body *BindFlavorToProjectCommand
}

func (r ApiFlavorsBindToProjectRequest) Body(body BindFlavorToProjectCommand) ApiFlavorsBindToProjectRequest {
	r.body = &body
	return r
}

func (r ApiFlavorsBindToProjectRequest) Execute() (*http.Response, error) {
	return r.ApiService.FlavorsBindToProjectExecute(r)
}

/*
FlavorsBindToProject Bind flavors to project

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param v
 @return ApiFlavorsBindToProjectRequest
*/
func (a *FlavorsApiService) FlavorsBindToProject(ctx context.Context, v string) ApiFlavorsBindToProjectRequest {
	return ApiFlavorsBindToProjectRequest{
		ApiService: a,
		ctx: ctx,
		v: v,
	}
}

// Execute executes the request
func (a *FlavorsApiService) FlavorsBindToProjectExecute(r ApiFlavorsBindToProjectRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorsApiService.FlavorsBindToProject")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v{v}/Flavors/bind"
	localVarPath = strings.Replace(localVarPath, "{"+"v"+"}", url.PathEscape(parameterValueToString(r.v, "v")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiFlavorsDropdownRecordDtosRequest struct {
	ctx context.Context
	ApiService *FlavorsApiService
	v string
	organizationId *int32
	filterBy *string
	search *string
}

func (r ApiFlavorsDropdownRecordDtosRequest) OrganizationId(organizationId int32) ApiFlavorsDropdownRecordDtosRequest {
	r.organizationId = &organizationId
	return r
}

func (r ApiFlavorsDropdownRecordDtosRequest) FilterBy(filterBy string) ApiFlavorsDropdownRecordDtosRequest {
	r.filterBy = &filterBy
	return r
}

func (r ApiFlavorsDropdownRecordDtosRequest) Search(search string) ApiFlavorsDropdownRecordDtosRequest {
	r.search = &search
	return r
}

func (r ApiFlavorsDropdownRecordDtosRequest) Execute() ([]CloudCredentialsDropdownRecordDto, *http.Response, error) {
	return r.ApiService.FlavorsDropdownRecordDtosExecute(r)
}

/*
FlavorsDropdownRecordDtos Retrieve cloud credentials dropdown list

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param v
 @return ApiFlavorsDropdownRecordDtosRequest
*/
func (a *FlavorsApiService) FlavorsDropdownRecordDtos(ctx context.Context, v string) ApiFlavorsDropdownRecordDtosRequest {
	return ApiFlavorsDropdownRecordDtosRequest{
		ApiService: a,
		ctx: ctx,
		v: v,
	}
}

// Execute executes the request
//  @return []CloudCredentialsDropdownRecordDto
func (a *FlavorsApiService) FlavorsDropdownRecordDtosExecute(r ApiFlavorsDropdownRecordDtosRequest) ([]CloudCredentialsDropdownRecordDto, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []CloudCredentialsDropdownRecordDto
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorsApiService.FlavorsDropdownRecordDtos")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v{v}/Flavors/credentials/dropdown/list"
	localVarPath = strings.Replace(localVarPath, "{"+"v"+"}", url.PathEscape(parameterValueToString(r.v, "v")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.organizationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "organizationId", r.organizationId, "")
	}
	if r.filterBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterBy", r.filterBy, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlavorsGetSelectedFlavorsForProjectRequest struct {
	ctx context.Context
	ApiService *FlavorsApiService
	v string
	limit *int32
	offset *int32
	projectId *int32
	sortBy *string
	sortDirection *string
	search *string
	filterBy *string
	organizationId *int32
	flavorName *string
	withPrice *bool
}

func (r ApiFlavorsGetSelectedFlavorsForProjectRequest) Limit(limit int32) ApiFlavorsGetSelectedFlavorsForProjectRequest {
	r.limit = &limit
	return r
}

func (r ApiFlavorsGetSelectedFlavorsForProjectRequest) Offset(offset int32) ApiFlavorsGetSelectedFlavorsForProjectRequest {
	r.offset = &offset
	return r
}

func (r ApiFlavorsGetSelectedFlavorsForProjectRequest) ProjectId(projectId int32) ApiFlavorsGetSelectedFlavorsForProjectRequest {
	r.projectId = &projectId
	return r
}

func (r ApiFlavorsGetSelectedFlavorsForProjectRequest) SortBy(sortBy string) ApiFlavorsGetSelectedFlavorsForProjectRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiFlavorsGetSelectedFlavorsForProjectRequest) SortDirection(sortDirection string) ApiFlavorsGetSelectedFlavorsForProjectRequest {
	r.sortDirection = &sortDirection
	return r
}

func (r ApiFlavorsGetSelectedFlavorsForProjectRequest) Search(search string) ApiFlavorsGetSelectedFlavorsForProjectRequest {
	r.search = &search
	return r
}

func (r ApiFlavorsGetSelectedFlavorsForProjectRequest) FilterBy(filterBy string) ApiFlavorsGetSelectedFlavorsForProjectRequest {
	r.filterBy = &filterBy
	return r
}

func (r ApiFlavorsGetSelectedFlavorsForProjectRequest) OrganizationId(organizationId int32) ApiFlavorsGetSelectedFlavorsForProjectRequest {
	r.organizationId = &organizationId
	return r
}

func (r ApiFlavorsGetSelectedFlavorsForProjectRequest) FlavorName(flavorName string) ApiFlavorsGetSelectedFlavorsForProjectRequest {
	r.flavorName = &flavorName
	return r
}

func (r ApiFlavorsGetSelectedFlavorsForProjectRequest) WithPrice(withPrice bool) ApiFlavorsGetSelectedFlavorsForProjectRequest {
	r.withPrice = &withPrice
	return r
}

func (r ApiFlavorsGetSelectedFlavorsForProjectRequest) Execute() (*BoundFlavorsForProjectsList, *http.Response, error) {
	return r.ApiService.FlavorsGetSelectedFlavorsForProjectExecute(r)
}

/*
FlavorsGetSelectedFlavorsForProject Retrieve selected flavors for projects

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param v
 @return ApiFlavorsGetSelectedFlavorsForProjectRequest
*/
func (a *FlavorsApiService) FlavorsGetSelectedFlavorsForProject(ctx context.Context, v string) ApiFlavorsGetSelectedFlavorsForProjectRequest {
	return ApiFlavorsGetSelectedFlavorsForProjectRequest{
		ApiService: a,
		ctx: ctx,
		v: v,
	}
}

// Execute executes the request
//  @return BoundFlavorsForProjectsList
func (a *FlavorsApiService) FlavorsGetSelectedFlavorsForProjectExecute(r ApiFlavorsGetSelectedFlavorsForProjectRequest) (*BoundFlavorsForProjectsList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BoundFlavorsForProjectsList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorsApiService.FlavorsGetSelectedFlavorsForProject")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v{v}/Flavors/projects/list"
	localVarPath = strings.Replace(localVarPath, "{"+"v"+"}", url.PathEscape(parameterValueToString(r.v, "v")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.projectId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "projectId", r.projectId, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortDirection", r.sortDirection, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.filterBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filterBy", r.filterBy, "")
	}
	if r.organizationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "organizationId", r.organizationId, "")
	}
	if r.flavorName != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "flavorName", r.flavorName, "")
	}
	if r.withPrice != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "withPrice", r.withPrice, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlavorsGoogleFlavorsRequest struct {
	ctx context.Context
	ApiService *FlavorsApiService
	cloudId int32
	v string
	offset *int32
	limit *int32
	startRam *float64
	endRam *float64
	startCpu *int32
	endCpu *int32
	search *string
	sortBy *string
	sortDirection *string
}

// Skip elements
func (r ApiFlavorsGoogleFlavorsRequest) Offset(offset int32) ApiFlavorsGoogleFlavorsRequest {
	r.offset = &offset
	return r
}

// Limits size (by default 50)
func (r ApiFlavorsGoogleFlavorsRequest) Limit(limit int32) ApiFlavorsGoogleFlavorsRequest {
	r.limit = &limit
	return r
}

func (r ApiFlavorsGoogleFlavorsRequest) StartRam(startRam float64) ApiFlavorsGoogleFlavorsRequest {
	r.startRam = &startRam
	return r
}

func (r ApiFlavorsGoogleFlavorsRequest) EndRam(endRam float64) ApiFlavorsGoogleFlavorsRequest {
	r.endRam = &endRam
	return r
}

func (r ApiFlavorsGoogleFlavorsRequest) StartCpu(startCpu int32) ApiFlavorsGoogleFlavorsRequest {
	r.startCpu = &startCpu
	return r
}

func (r ApiFlavorsGoogleFlavorsRequest) EndCpu(endCpu int32) ApiFlavorsGoogleFlavorsRequest {
	r.endCpu = &endCpu
	return r
}

func (r ApiFlavorsGoogleFlavorsRequest) Search(search string) ApiFlavorsGoogleFlavorsRequest {
	r.search = &search
	return r
}

func (r ApiFlavorsGoogleFlavorsRequest) SortBy(sortBy string) ApiFlavorsGoogleFlavorsRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiFlavorsGoogleFlavorsRequest) SortDirection(sortDirection string) ApiFlavorsGoogleFlavorsRequest {
	r.sortDirection = &sortDirection
	return r
}

func (r ApiFlavorsGoogleFlavorsRequest) Execute() (*GoogleFlavorList, *http.Response, error) {
	return r.ApiService.FlavorsGoogleFlavorsExecute(r)
}

/*
FlavorsGoogleFlavors Retrieve google flavors

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cloudId
 @param v
 @return ApiFlavorsGoogleFlavorsRequest
*/
func (a *FlavorsApiService) FlavorsGoogleFlavors(ctx context.Context, cloudId int32, v string) ApiFlavorsGoogleFlavorsRequest {
	return ApiFlavorsGoogleFlavorsRequest{
		ApiService: a,
		ctx: ctx,
		cloudId: cloudId,
		v: v,
	}
}

// Execute executes the request
//  @return GoogleFlavorList
func (a *FlavorsApiService) FlavorsGoogleFlavorsExecute(r ApiFlavorsGoogleFlavorsRequest) (*GoogleFlavorList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GoogleFlavorList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorsApiService.FlavorsGoogleFlavors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v{v}/Flavors/google/{cloudId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cloudId"+"}", url.PathEscape(parameterValueToString(r.cloudId, "cloudId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"v"+"}", url.PathEscape(parameterValueToString(r.v, "v")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.startRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startRam", r.startRam, "")
	}
	if r.endRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endRam", r.endRam, "")
	}
	if r.startCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startCpu", r.startCpu, "")
	}
	if r.endCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endCpu", r.endCpu, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortDirection", r.sortDirection, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlavorsOpenstackFlavorsRequest struct {
	ctx context.Context
	ApiService *FlavorsApiService
	cloudId int32
	v string
	offset *int32
	limit *int32
	startRam *float64
	endRam *float64
	startCpu *int32
	endCpu *int32
	search *string
	sortBy *string
	sortDirection *string
}

// Skip elements
func (r ApiFlavorsOpenstackFlavorsRequest) Offset(offset int32) ApiFlavorsOpenstackFlavorsRequest {
	r.offset = &offset
	return r
}

// Limits size (by default 50)
func (r ApiFlavorsOpenstackFlavorsRequest) Limit(limit int32) ApiFlavorsOpenstackFlavorsRequest {
	r.limit = &limit
	return r
}

func (r ApiFlavorsOpenstackFlavorsRequest) StartRam(startRam float64) ApiFlavorsOpenstackFlavorsRequest {
	r.startRam = &startRam
	return r
}

func (r ApiFlavorsOpenstackFlavorsRequest) EndRam(endRam float64) ApiFlavorsOpenstackFlavorsRequest {
	r.endRam = &endRam
	return r
}

func (r ApiFlavorsOpenstackFlavorsRequest) StartCpu(startCpu int32) ApiFlavorsOpenstackFlavorsRequest {
	r.startCpu = &startCpu
	return r
}

func (r ApiFlavorsOpenstackFlavorsRequest) EndCpu(endCpu int32) ApiFlavorsOpenstackFlavorsRequest {
	r.endCpu = &endCpu
	return r
}

func (r ApiFlavorsOpenstackFlavorsRequest) Search(search string) ApiFlavorsOpenstackFlavorsRequest {
	r.search = &search
	return r
}

func (r ApiFlavorsOpenstackFlavorsRequest) SortBy(sortBy string) ApiFlavorsOpenstackFlavorsRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiFlavorsOpenstackFlavorsRequest) SortDirection(sortDirection string) ApiFlavorsOpenstackFlavorsRequest {
	r.sortDirection = &sortDirection
	return r
}

func (r ApiFlavorsOpenstackFlavorsRequest) Execute() (*OpenstackFlavorList, *http.Response, error) {
	return r.ApiService.FlavorsOpenstackFlavorsExecute(r)
}

/*
FlavorsOpenstackFlavors Retrieve openstack flavors

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cloudId
 @param v
 @return ApiFlavorsOpenstackFlavorsRequest
*/
func (a *FlavorsApiService) FlavorsOpenstackFlavors(ctx context.Context, cloudId int32, v string) ApiFlavorsOpenstackFlavorsRequest {
	return ApiFlavorsOpenstackFlavorsRequest{
		ApiService: a,
		ctx: ctx,
		cloudId: cloudId,
		v: v,
	}
}

// Execute executes the request
//  @return OpenstackFlavorList
func (a *FlavorsApiService) FlavorsOpenstackFlavorsExecute(r ApiFlavorsOpenstackFlavorsRequest) (*OpenstackFlavorList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *OpenstackFlavorList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorsApiService.FlavorsOpenstackFlavors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v{v}/Flavors/openstack/{cloudId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cloudId"+"}", url.PathEscape(parameterValueToString(r.cloudId, "cloudId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"v"+"}", url.PathEscape(parameterValueToString(r.v, "v")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.startRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startRam", r.startRam, "")
	}
	if r.endRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endRam", r.endRam, "")
	}
	if r.startCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startCpu", r.startCpu, "")
	}
	if r.endCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endCpu", r.endCpu, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortDirection", r.sortDirection, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlavorsProxmoxFlavorsRequest struct {
	ctx context.Context
	ApiService *FlavorsApiService
	cloudId int32
	v string
	limit *int32
	offset *int32
	startRam *int64
	endRam *int64
	startCpu *int32
	endCpu *int32
	search *string
	sortBy *string
	sortDirection *string
}

// Limits size (by default 50)
func (r ApiFlavorsProxmoxFlavorsRequest) Limit(limit int32) ApiFlavorsProxmoxFlavorsRequest {
	r.limit = &limit
	return r
}

// Skip elements
func (r ApiFlavorsProxmoxFlavorsRequest) Offset(offset int32) ApiFlavorsProxmoxFlavorsRequest {
	r.offset = &offset
	return r
}

func (r ApiFlavorsProxmoxFlavorsRequest) StartRam(startRam int64) ApiFlavorsProxmoxFlavorsRequest {
	r.startRam = &startRam
	return r
}

func (r ApiFlavorsProxmoxFlavorsRequest) EndRam(endRam int64) ApiFlavorsProxmoxFlavorsRequest {
	r.endRam = &endRam
	return r
}

func (r ApiFlavorsProxmoxFlavorsRequest) StartCpu(startCpu int32) ApiFlavorsProxmoxFlavorsRequest {
	r.startCpu = &startCpu
	return r
}

func (r ApiFlavorsProxmoxFlavorsRequest) EndCpu(endCpu int32) ApiFlavorsProxmoxFlavorsRequest {
	r.endCpu = &endCpu
	return r
}

func (r ApiFlavorsProxmoxFlavorsRequest) Search(search string) ApiFlavorsProxmoxFlavorsRequest {
	r.search = &search
	return r
}

func (r ApiFlavorsProxmoxFlavorsRequest) SortBy(sortBy string) ApiFlavorsProxmoxFlavorsRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiFlavorsProxmoxFlavorsRequest) SortDirection(sortDirection string) ApiFlavorsProxmoxFlavorsRequest {
	r.sortDirection = &sortDirection
	return r
}

func (r ApiFlavorsProxmoxFlavorsRequest) Execute() (*ProxmoxFlavorList, *http.Response, error) {
	return r.ApiService.FlavorsProxmoxFlavorsExecute(r)
}

/*
FlavorsProxmoxFlavors Retrieve proxmox flavors

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cloudId
 @param v
 @return ApiFlavorsProxmoxFlavorsRequest
*/
func (a *FlavorsApiService) FlavorsProxmoxFlavors(ctx context.Context, cloudId int32, v string) ApiFlavorsProxmoxFlavorsRequest {
	return ApiFlavorsProxmoxFlavorsRequest{
		ApiService: a,
		ctx: ctx,
		cloudId: cloudId,
		v: v,
	}
}

// Execute executes the request
//  @return ProxmoxFlavorList
func (a *FlavorsApiService) FlavorsProxmoxFlavorsExecute(r ApiFlavorsProxmoxFlavorsRequest) (*ProxmoxFlavorList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ProxmoxFlavorList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorsApiService.FlavorsProxmoxFlavors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v{v}/Flavors/proxmox/{cloudId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cloudId"+"}", url.PathEscape(parameterValueToString(r.cloudId, "cloudId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"v"+"}", url.PathEscape(parameterValueToString(r.v, "v")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.startRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startRam", r.startRam, "")
	}
	if r.endRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endRam", r.endRam, "")
	}
	if r.startCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startCpu", r.startCpu, "")
	}
	if r.endCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endCpu", r.endCpu, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortDirection", r.sortDirection, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlavorsTanzuFlavorsRequest struct {
	ctx context.Context
	ApiService *FlavorsApiService
	cloudId int32
	v string
	offset *int32
	limit *int32
	startRam *int32
	endRam *int32
	startCpu *int32
	endCpu *int32
	search *string
	sortBy *string
	sortDirection *string
}

// Skip elements
func (r ApiFlavorsTanzuFlavorsRequest) Offset(offset int32) ApiFlavorsTanzuFlavorsRequest {
	r.offset = &offset
	return r
}

// Limits size (by default 50)
func (r ApiFlavorsTanzuFlavorsRequest) Limit(limit int32) ApiFlavorsTanzuFlavorsRequest {
	r.limit = &limit
	return r
}

func (r ApiFlavorsTanzuFlavorsRequest) StartRam(startRam int32) ApiFlavorsTanzuFlavorsRequest {
	r.startRam = &startRam
	return r
}

func (r ApiFlavorsTanzuFlavorsRequest) EndRam(endRam int32) ApiFlavorsTanzuFlavorsRequest {
	r.endRam = &endRam
	return r
}

func (r ApiFlavorsTanzuFlavorsRequest) StartCpu(startCpu int32) ApiFlavorsTanzuFlavorsRequest {
	r.startCpu = &startCpu
	return r
}

func (r ApiFlavorsTanzuFlavorsRequest) EndCpu(endCpu int32) ApiFlavorsTanzuFlavorsRequest {
	r.endCpu = &endCpu
	return r
}

func (r ApiFlavorsTanzuFlavorsRequest) Search(search string) ApiFlavorsTanzuFlavorsRequest {
	r.search = &search
	return r
}

func (r ApiFlavorsTanzuFlavorsRequest) SortBy(sortBy string) ApiFlavorsTanzuFlavorsRequest {
	r.sortBy = &sortBy
	return r
}

func (r ApiFlavorsTanzuFlavorsRequest) SortDirection(sortDirection string) ApiFlavorsTanzuFlavorsRequest {
	r.sortDirection = &sortDirection
	return r
}

func (r ApiFlavorsTanzuFlavorsRequest) Execute() (*TanzuFlavorList, *http.Response, error) {
	return r.ApiService.FlavorsTanzuFlavorsExecute(r)
}

/*
FlavorsTanzuFlavors Retrieve tanzu flavors

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param cloudId
 @param v
 @return ApiFlavorsTanzuFlavorsRequest
*/
func (a *FlavorsApiService) FlavorsTanzuFlavors(ctx context.Context, cloudId int32, v string) ApiFlavorsTanzuFlavorsRequest {
	return ApiFlavorsTanzuFlavorsRequest{
		ApiService: a,
		ctx: ctx,
		cloudId: cloudId,
		v: v,
	}
}

// Execute executes the request
//  @return TanzuFlavorList
func (a *FlavorsApiService) FlavorsTanzuFlavorsExecute(r ApiFlavorsTanzuFlavorsRequest) (*TanzuFlavorList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TanzuFlavorList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorsApiService.FlavorsTanzuFlavors")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v{v}/Flavors/tanzu/{cloudId}"
	localVarPath = strings.Replace(localVarPath, "{"+"cloudId"+"}", url.PathEscape(parameterValueToString(r.cloudId, "cloudId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"v"+"}", url.PathEscape(parameterValueToString(r.v, "v")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.startRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startRam", r.startRam, "")
	}
	if r.endRam != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endRam", r.endRam, "")
	}
	if r.startCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "startCpu", r.startCpu, "")
	}
	if r.endCpu != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "endCpu", r.endCpu, "")
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.sortBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortBy", r.sortBy, "")
	}
	if r.sortDirection != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sortDirection", r.sortDirection, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiFlavorsUnbindFromProjectRequest struct {
	ctx context.Context
	ApiService *FlavorsApiService
	v string
	body *UnbindFlavorFromProjectCommand
}

func (r ApiFlavorsUnbindFromProjectRequest) Body(body UnbindFlavorFromProjectCommand) ApiFlavorsUnbindFromProjectRequest {
	r.body = &body
	return r
}

func (r ApiFlavorsUnbindFromProjectRequest) Execute() (*http.Response, error) {
	return r.ApiService.FlavorsUnbindFromProjectExecute(r)
}

/*
FlavorsUnbindFromProject Unbind flavors from project

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param v
 @return ApiFlavorsUnbindFromProjectRequest
*/
func (a *FlavorsApiService) FlavorsUnbindFromProject(ctx context.Context, v string) ApiFlavorsUnbindFromProjectRequest {
	return ApiFlavorsUnbindFromProjectRequest{
		ApiService: a,
		ctx: ctx,
		v: v,
	}
}

// Execute executes the request
func (a *FlavorsApiService) FlavorsUnbindFromProjectExecute(r ApiFlavorsUnbindFromProjectRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlavorsApiService.FlavorsUnbindFromProject")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v{v}/Flavors/unbind"
	localVarPath = strings.Replace(localVarPath, "{"+"v"+"}", url.PathEscape(parameterValueToString(r.v, "v")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "text/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ProblemDetails
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
