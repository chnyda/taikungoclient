/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@itera.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the EditTicketCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EditTicketCommand{}

// EditTicketCommand struct for EditTicketCommand
type EditTicketCommand struct {
	TicketId string `json:"ticketId"`
	Name string `json:"name"`
	Description string `json:"description"`
}

// NewEditTicketCommand instantiates a new EditTicketCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEditTicketCommand(ticketId string, name string, description string) *EditTicketCommand {
	this := EditTicketCommand{}
	this.TicketId = ticketId
	this.Name = name
	this.Description = description
	return &this
}

// NewEditTicketCommandWithDefaults instantiates a new EditTicketCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEditTicketCommandWithDefaults() *EditTicketCommand {
	this := EditTicketCommand{}
	return &this
}

// GetTicketId returns the TicketId field value
func (o *EditTicketCommand) GetTicketId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TicketId
}

// GetTicketIdOk returns a tuple with the TicketId field value
// and a boolean to check if the value has been set.
func (o *EditTicketCommand) GetTicketIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TicketId, true
}

// SetTicketId sets field value
func (o *EditTicketCommand) SetTicketId(v string) {
	o.TicketId = v
}

// GetName returns the Name field value
func (o *EditTicketCommand) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EditTicketCommand) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EditTicketCommand) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value
func (o *EditTicketCommand) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *EditTicketCommand) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *EditTicketCommand) SetDescription(v string) {
	o.Description = v
}

func (o EditTicketCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EditTicketCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ticketId"] = o.TicketId
	toSerialize["name"] = o.Name
	toSerialize["description"] = o.Description
	return toSerialize, nil
}

type NullableEditTicketCommand struct {
	value *EditTicketCommand
	isSet bool
}

func (v NullableEditTicketCommand) Get() *EditTicketCommand {
	return v.value
}

func (v *NullableEditTicketCommand) Set(val *EditTicketCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableEditTicketCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableEditTicketCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEditTicketCommand(val *EditTicketCommand) *NullableEditTicketCommand {
	return &NullableEditTicketCommand{value: val, isSet: true}
}

func (v NullableEditTicketCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEditTicketCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


