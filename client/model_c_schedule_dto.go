/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@itera.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"time"
)

// checks if the CScheduleDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CScheduleDto{}

// CScheduleDto struct for CScheduleDto
type CScheduleDto struct {
	Status *Status `json:"status,omitempty"`
	MetadataName *string `json:"metadataName,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	Schedule *string `json:"schedule,omitempty"`
	Ttl *string `json:"ttl,omitempty"`
	LastBackup *time.Time `json:"lastBackup,omitempty"`
	Phase *string `json:"phase,omitempty"`
	ExcludedNamespaces []string `json:"excludedNamespaces,omitempty"`
	IncludedNamespaces []string `json:"includedNamespaces,omitempty"`
}

// NewCScheduleDto instantiates a new CScheduleDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCScheduleDto() *CScheduleDto {
	this := CScheduleDto{}
	return &this
}

// NewCScheduleDtoWithDefaults instantiates a new CScheduleDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCScheduleDtoWithDefaults() *CScheduleDto {
	this := CScheduleDto{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CScheduleDto) GetStatus() Status {
	if o == nil || IsNil(o.Status) {
		var ret Status
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CScheduleDto) GetStatusOk() (*Status, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CScheduleDto) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given Status and assigns it to the Status field.
func (o *CScheduleDto) SetStatus(v Status) {
	o.Status = &v
}

// GetMetadataName returns the MetadataName field value if set, zero value otherwise.
func (o *CScheduleDto) GetMetadataName() string {
	if o == nil || IsNil(o.MetadataName) {
		var ret string
		return ret
	}
	return *o.MetadataName
}

// GetMetadataNameOk returns a tuple with the MetadataName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CScheduleDto) GetMetadataNameOk() (*string, bool) {
	if o == nil || IsNil(o.MetadataName) {
		return nil, false
	}
	return o.MetadataName, true
}

// HasMetadataName returns a boolean if a field has been set.
func (o *CScheduleDto) HasMetadataName() bool {
	if o != nil && !IsNil(o.MetadataName) {
		return true
	}

	return false
}

// SetMetadataName gets a reference to the given string and assigns it to the MetadataName field.
func (o *CScheduleDto) SetMetadataName(v string) {
	o.MetadataName = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *CScheduleDto) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CScheduleDto) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *CScheduleDto) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *CScheduleDto) SetNamespace(v string) {
	o.Namespace = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *CScheduleDto) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CScheduleDto) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *CScheduleDto) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *CScheduleDto) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *CScheduleDto) GetSchedule() string {
	if o == nil || IsNil(o.Schedule) {
		var ret string
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CScheduleDto) GetScheduleOk() (*string, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *CScheduleDto) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given string and assigns it to the Schedule field.
func (o *CScheduleDto) SetSchedule(v string) {
	o.Schedule = &v
}

// GetTtl returns the Ttl field value if set, zero value otherwise.
func (o *CScheduleDto) GetTtl() string {
	if o == nil || IsNil(o.Ttl) {
		var ret string
		return ret
	}
	return *o.Ttl
}

// GetTtlOk returns a tuple with the Ttl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CScheduleDto) GetTtlOk() (*string, bool) {
	if o == nil || IsNil(o.Ttl) {
		return nil, false
	}
	return o.Ttl, true
}

// HasTtl returns a boolean if a field has been set.
func (o *CScheduleDto) HasTtl() bool {
	if o != nil && !IsNil(o.Ttl) {
		return true
	}

	return false
}

// SetTtl gets a reference to the given string and assigns it to the Ttl field.
func (o *CScheduleDto) SetTtl(v string) {
	o.Ttl = &v
}

// GetLastBackup returns the LastBackup field value if set, zero value otherwise.
func (o *CScheduleDto) GetLastBackup() time.Time {
	if o == nil || IsNil(o.LastBackup) {
		var ret time.Time
		return ret
	}
	return *o.LastBackup
}

// GetLastBackupOk returns a tuple with the LastBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CScheduleDto) GetLastBackupOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastBackup) {
		return nil, false
	}
	return o.LastBackup, true
}

// HasLastBackup returns a boolean if a field has been set.
func (o *CScheduleDto) HasLastBackup() bool {
	if o != nil && !IsNil(o.LastBackup) {
		return true
	}

	return false
}

// SetLastBackup gets a reference to the given time.Time and assigns it to the LastBackup field.
func (o *CScheduleDto) SetLastBackup(v time.Time) {
	o.LastBackup = &v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *CScheduleDto) GetPhase() string {
	if o == nil || IsNil(o.Phase) {
		var ret string
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CScheduleDto) GetPhaseOk() (*string, bool) {
	if o == nil || IsNil(o.Phase) {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *CScheduleDto) HasPhase() bool {
	if o != nil && !IsNil(o.Phase) {
		return true
	}

	return false
}

// SetPhase gets a reference to the given string and assigns it to the Phase field.
func (o *CScheduleDto) SetPhase(v string) {
	o.Phase = &v
}

// GetExcludedNamespaces returns the ExcludedNamespaces field value if set, zero value otherwise.
func (o *CScheduleDto) GetExcludedNamespaces() []string {
	if o == nil || IsNil(o.ExcludedNamespaces) {
		var ret []string
		return ret
	}
	return o.ExcludedNamespaces
}

// GetExcludedNamespacesOk returns a tuple with the ExcludedNamespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CScheduleDto) GetExcludedNamespacesOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedNamespaces) {
		return nil, false
	}
	return o.ExcludedNamespaces, true
}

// HasExcludedNamespaces returns a boolean if a field has been set.
func (o *CScheduleDto) HasExcludedNamespaces() bool {
	if o != nil && !IsNil(o.ExcludedNamespaces) {
		return true
	}

	return false
}

// SetExcludedNamespaces gets a reference to the given []string and assigns it to the ExcludedNamespaces field.
func (o *CScheduleDto) SetExcludedNamespaces(v []string) {
	o.ExcludedNamespaces = v
}

// GetIncludedNamespaces returns the IncludedNamespaces field value if set, zero value otherwise.
func (o *CScheduleDto) GetIncludedNamespaces() []string {
	if o == nil || IsNil(o.IncludedNamespaces) {
		var ret []string
		return ret
	}
	return o.IncludedNamespaces
}

// GetIncludedNamespacesOk returns a tuple with the IncludedNamespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CScheduleDto) GetIncludedNamespacesOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludedNamespaces) {
		return nil, false
	}
	return o.IncludedNamespaces, true
}

// HasIncludedNamespaces returns a boolean if a field has been set.
func (o *CScheduleDto) HasIncludedNamespaces() bool {
	if o != nil && !IsNil(o.IncludedNamespaces) {
		return true
	}

	return false
}

// SetIncludedNamespaces gets a reference to the given []string and assigns it to the IncludedNamespaces field.
func (o *CScheduleDto) SetIncludedNamespaces(v []string) {
	o.IncludedNamespaces = v
}

func (o CScheduleDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CScheduleDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.MetadataName) {
		toSerialize["metadataName"] = o.MetadataName
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.Ttl) {
		toSerialize["ttl"] = o.Ttl
	}
	if !IsNil(o.LastBackup) {
		toSerialize["lastBackup"] = o.LastBackup
	}
	if !IsNil(o.Phase) {
		toSerialize["phase"] = o.Phase
	}
	if !IsNil(o.ExcludedNamespaces) {
		toSerialize["excludedNamespaces"] = o.ExcludedNamespaces
	}
	if !IsNil(o.IncludedNamespaces) {
		toSerialize["includedNamespaces"] = o.IncludedNamespaces
	}
	return toSerialize, nil
}

type NullableCScheduleDto struct {
	value *CScheduleDto
	isSet bool
}

func (v NullableCScheduleDto) Get() *CScheduleDto {
	return v.value
}

func (v *NullableCScheduleDto) Set(val *CScheduleDto) {
	v.value = val
	v.isSet = true
}

func (v NullableCScheduleDto) IsSet() bool {
	return v.isSet
}

func (v *NullableCScheduleDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCScheduleDto(val *CScheduleDto) *NullableCScheduleDto {
	return &NullableCScheduleDto{value: val, isSet: true}
}

func (v NullableCScheduleDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCScheduleDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


