/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@itera.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the ProjectForUpdateDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectForUpdateDto{}

// ProjectForUpdateDto struct for ProjectForUpdateDto
type ProjectForUpdateDto struct {
	KubeConfig *string `json:"kubeConfig,omitempty"`
	KubesprayCurrentVersion *string `json:"kubesprayCurrentVersion,omitempty"`
	AccessIp *string `json:"accessIp,omitempty"`
	ImageName *string `json:"imageName,omitempty"`
	MonitoringIp *string `json:"monitoringIp,omitempty"`
	TanzuReleaseCurrentVersion *string `json:"tanzuReleaseCurrentVersion,omitempty"`
	Status *ProjectStatus `json:"status,omitempty"`
	Health *ProjectHealth `json:"health,omitempty"`
	IsBackupEnabled *bool `json:"isBackupEnabled,omitempty"`
	IsMonitoringEnabled *bool `json:"isMonitoringEnabled,omitempty"`
	IsOpaEnabled *bool `json:"isOpaEnabled,omitempty"`
	IsAutoUpgrade *bool `json:"isAutoUpgrade,omitempty"`
	AppEnabled *bool `json:"appEnabled,omitempty"`
	IsKubevapEnabled *bool `json:"isKubevapEnabled,omitempty"`
	KubernetesCurrentVersion *string `json:"kubernetesCurrentVersion,omitempty"`
	FailureReason *string `json:"failureReason,omitempty"`
}

// NewProjectForUpdateDto instantiates a new ProjectForUpdateDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectForUpdateDto() *ProjectForUpdateDto {
	this := ProjectForUpdateDto{}
	return &this
}

// NewProjectForUpdateDtoWithDefaults instantiates a new ProjectForUpdateDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectForUpdateDtoWithDefaults() *ProjectForUpdateDto {
	this := ProjectForUpdateDto{}
	return &this
}

// GetKubeConfig returns the KubeConfig field value if set, zero value otherwise.
func (o *ProjectForUpdateDto) GetKubeConfig() string {
	if o == nil || IsNil(o.KubeConfig) {
		var ret string
		return ret
	}
	return *o.KubeConfig
}

// GetKubeConfigOk returns a tuple with the KubeConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectForUpdateDto) GetKubeConfigOk() (*string, bool) {
	if o == nil || IsNil(o.KubeConfig) {
		return nil, false
	}
	return o.KubeConfig, true
}

// HasKubeConfig returns a boolean if a field has been set.
func (o *ProjectForUpdateDto) HasKubeConfig() bool {
	if o != nil && !IsNil(o.KubeConfig) {
		return true
	}

	return false
}

// SetKubeConfig gets a reference to the given string and assigns it to the KubeConfig field.
func (o *ProjectForUpdateDto) SetKubeConfig(v string) {
	o.KubeConfig = &v
}

// GetKubesprayCurrentVersion returns the KubesprayCurrentVersion field value if set, zero value otherwise.
func (o *ProjectForUpdateDto) GetKubesprayCurrentVersion() string {
	if o == nil || IsNil(o.KubesprayCurrentVersion) {
		var ret string
		return ret
	}
	return *o.KubesprayCurrentVersion
}

// GetKubesprayCurrentVersionOk returns a tuple with the KubesprayCurrentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectForUpdateDto) GetKubesprayCurrentVersionOk() (*string, bool) {
	if o == nil || IsNil(o.KubesprayCurrentVersion) {
		return nil, false
	}
	return o.KubesprayCurrentVersion, true
}

// HasKubesprayCurrentVersion returns a boolean if a field has been set.
func (o *ProjectForUpdateDto) HasKubesprayCurrentVersion() bool {
	if o != nil && !IsNil(o.KubesprayCurrentVersion) {
		return true
	}

	return false
}

// SetKubesprayCurrentVersion gets a reference to the given string and assigns it to the KubesprayCurrentVersion field.
func (o *ProjectForUpdateDto) SetKubesprayCurrentVersion(v string) {
	o.KubesprayCurrentVersion = &v
}

// GetAccessIp returns the AccessIp field value if set, zero value otherwise.
func (o *ProjectForUpdateDto) GetAccessIp() string {
	if o == nil || IsNil(o.AccessIp) {
		var ret string
		return ret
	}
	return *o.AccessIp
}

// GetAccessIpOk returns a tuple with the AccessIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectForUpdateDto) GetAccessIpOk() (*string, bool) {
	if o == nil || IsNil(o.AccessIp) {
		return nil, false
	}
	return o.AccessIp, true
}

// HasAccessIp returns a boolean if a field has been set.
func (o *ProjectForUpdateDto) HasAccessIp() bool {
	if o != nil && !IsNil(o.AccessIp) {
		return true
	}

	return false
}

// SetAccessIp gets a reference to the given string and assigns it to the AccessIp field.
func (o *ProjectForUpdateDto) SetAccessIp(v string) {
	o.AccessIp = &v
}

// GetImageName returns the ImageName field value if set, zero value otherwise.
func (o *ProjectForUpdateDto) GetImageName() string {
	if o == nil || IsNil(o.ImageName) {
		var ret string
		return ret
	}
	return *o.ImageName
}

// GetImageNameOk returns a tuple with the ImageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectForUpdateDto) GetImageNameOk() (*string, bool) {
	if o == nil || IsNil(o.ImageName) {
		return nil, false
	}
	return o.ImageName, true
}

// HasImageName returns a boolean if a field has been set.
func (o *ProjectForUpdateDto) HasImageName() bool {
	if o != nil && !IsNil(o.ImageName) {
		return true
	}

	return false
}

// SetImageName gets a reference to the given string and assigns it to the ImageName field.
func (o *ProjectForUpdateDto) SetImageName(v string) {
	o.ImageName = &v
}

// GetMonitoringIp returns the MonitoringIp field value if set, zero value otherwise.
func (o *ProjectForUpdateDto) GetMonitoringIp() string {
	if o == nil || IsNil(o.MonitoringIp) {
		var ret string
		return ret
	}
	return *o.MonitoringIp
}

// GetMonitoringIpOk returns a tuple with the MonitoringIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectForUpdateDto) GetMonitoringIpOk() (*string, bool) {
	if o == nil || IsNil(o.MonitoringIp) {
		return nil, false
	}
	return o.MonitoringIp, true
}

// HasMonitoringIp returns a boolean if a field has been set.
func (o *ProjectForUpdateDto) HasMonitoringIp() bool {
	if o != nil && !IsNil(o.MonitoringIp) {
		return true
	}

	return false
}

// SetMonitoringIp gets a reference to the given string and assigns it to the MonitoringIp field.
func (o *ProjectForUpdateDto) SetMonitoringIp(v string) {
	o.MonitoringIp = &v
}

// GetTanzuReleaseCurrentVersion returns the TanzuReleaseCurrentVersion field value if set, zero value otherwise.
func (o *ProjectForUpdateDto) GetTanzuReleaseCurrentVersion() string {
	if o == nil || IsNil(o.TanzuReleaseCurrentVersion) {
		var ret string
		return ret
	}
	return *o.TanzuReleaseCurrentVersion
}

// GetTanzuReleaseCurrentVersionOk returns a tuple with the TanzuReleaseCurrentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectForUpdateDto) GetTanzuReleaseCurrentVersionOk() (*string, bool) {
	if o == nil || IsNil(o.TanzuReleaseCurrentVersion) {
		return nil, false
	}
	return o.TanzuReleaseCurrentVersion, true
}

// HasTanzuReleaseCurrentVersion returns a boolean if a field has been set.
func (o *ProjectForUpdateDto) HasTanzuReleaseCurrentVersion() bool {
	if o != nil && !IsNil(o.TanzuReleaseCurrentVersion) {
		return true
	}

	return false
}

// SetTanzuReleaseCurrentVersion gets a reference to the given string and assigns it to the TanzuReleaseCurrentVersion field.
func (o *ProjectForUpdateDto) SetTanzuReleaseCurrentVersion(v string) {
	o.TanzuReleaseCurrentVersion = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ProjectForUpdateDto) GetStatus() ProjectStatus {
	if o == nil || IsNil(o.Status) {
		var ret ProjectStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectForUpdateDto) GetStatusOk() (*ProjectStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ProjectForUpdateDto) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ProjectStatus and assigns it to the Status field.
func (o *ProjectForUpdateDto) SetStatus(v ProjectStatus) {
	o.Status = &v
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *ProjectForUpdateDto) GetHealth() ProjectHealth {
	if o == nil || IsNil(o.Health) {
		var ret ProjectHealth
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectForUpdateDto) GetHealthOk() (*ProjectHealth, bool) {
	if o == nil || IsNil(o.Health) {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *ProjectForUpdateDto) HasHealth() bool {
	if o != nil && !IsNil(o.Health) {
		return true
	}

	return false
}

// SetHealth gets a reference to the given ProjectHealth and assigns it to the Health field.
func (o *ProjectForUpdateDto) SetHealth(v ProjectHealth) {
	o.Health = &v
}

// GetIsBackupEnabled returns the IsBackupEnabled field value if set, zero value otherwise.
func (o *ProjectForUpdateDto) GetIsBackupEnabled() bool {
	if o == nil || IsNil(o.IsBackupEnabled) {
		var ret bool
		return ret
	}
	return *o.IsBackupEnabled
}

// GetIsBackupEnabledOk returns a tuple with the IsBackupEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectForUpdateDto) GetIsBackupEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBackupEnabled) {
		return nil, false
	}
	return o.IsBackupEnabled, true
}

// HasIsBackupEnabled returns a boolean if a field has been set.
func (o *ProjectForUpdateDto) HasIsBackupEnabled() bool {
	if o != nil && !IsNil(o.IsBackupEnabled) {
		return true
	}

	return false
}

// SetIsBackupEnabled gets a reference to the given bool and assigns it to the IsBackupEnabled field.
func (o *ProjectForUpdateDto) SetIsBackupEnabled(v bool) {
	o.IsBackupEnabled = &v
}

// GetIsMonitoringEnabled returns the IsMonitoringEnabled field value if set, zero value otherwise.
func (o *ProjectForUpdateDto) GetIsMonitoringEnabled() bool {
	if o == nil || IsNil(o.IsMonitoringEnabled) {
		var ret bool
		return ret
	}
	return *o.IsMonitoringEnabled
}

// GetIsMonitoringEnabledOk returns a tuple with the IsMonitoringEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectForUpdateDto) GetIsMonitoringEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsMonitoringEnabled) {
		return nil, false
	}
	return o.IsMonitoringEnabled, true
}

// HasIsMonitoringEnabled returns a boolean if a field has been set.
func (o *ProjectForUpdateDto) HasIsMonitoringEnabled() bool {
	if o != nil && !IsNil(o.IsMonitoringEnabled) {
		return true
	}

	return false
}

// SetIsMonitoringEnabled gets a reference to the given bool and assigns it to the IsMonitoringEnabled field.
func (o *ProjectForUpdateDto) SetIsMonitoringEnabled(v bool) {
	o.IsMonitoringEnabled = &v
}

// GetIsOpaEnabled returns the IsOpaEnabled field value if set, zero value otherwise.
func (o *ProjectForUpdateDto) GetIsOpaEnabled() bool {
	if o == nil || IsNil(o.IsOpaEnabled) {
		var ret bool
		return ret
	}
	return *o.IsOpaEnabled
}

// GetIsOpaEnabledOk returns a tuple with the IsOpaEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectForUpdateDto) GetIsOpaEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsOpaEnabled) {
		return nil, false
	}
	return o.IsOpaEnabled, true
}

// HasIsOpaEnabled returns a boolean if a field has been set.
func (o *ProjectForUpdateDto) HasIsOpaEnabled() bool {
	if o != nil && !IsNil(o.IsOpaEnabled) {
		return true
	}

	return false
}

// SetIsOpaEnabled gets a reference to the given bool and assigns it to the IsOpaEnabled field.
func (o *ProjectForUpdateDto) SetIsOpaEnabled(v bool) {
	o.IsOpaEnabled = &v
}

// GetIsAutoUpgrade returns the IsAutoUpgrade field value if set, zero value otherwise.
func (o *ProjectForUpdateDto) GetIsAutoUpgrade() bool {
	if o == nil || IsNil(o.IsAutoUpgrade) {
		var ret bool
		return ret
	}
	return *o.IsAutoUpgrade
}

// GetIsAutoUpgradeOk returns a tuple with the IsAutoUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectForUpdateDto) GetIsAutoUpgradeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsAutoUpgrade) {
		return nil, false
	}
	return o.IsAutoUpgrade, true
}

// HasIsAutoUpgrade returns a boolean if a field has been set.
func (o *ProjectForUpdateDto) HasIsAutoUpgrade() bool {
	if o != nil && !IsNil(o.IsAutoUpgrade) {
		return true
	}

	return false
}

// SetIsAutoUpgrade gets a reference to the given bool and assigns it to the IsAutoUpgrade field.
func (o *ProjectForUpdateDto) SetIsAutoUpgrade(v bool) {
	o.IsAutoUpgrade = &v
}

// GetAppEnabled returns the AppEnabled field value if set, zero value otherwise.
func (o *ProjectForUpdateDto) GetAppEnabled() bool {
	if o == nil || IsNil(o.AppEnabled) {
		var ret bool
		return ret
	}
	return *o.AppEnabled
}

// GetAppEnabledOk returns a tuple with the AppEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectForUpdateDto) GetAppEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.AppEnabled) {
		return nil, false
	}
	return o.AppEnabled, true
}

// HasAppEnabled returns a boolean if a field has been set.
func (o *ProjectForUpdateDto) HasAppEnabled() bool {
	if o != nil && !IsNil(o.AppEnabled) {
		return true
	}

	return false
}

// SetAppEnabled gets a reference to the given bool and assigns it to the AppEnabled field.
func (o *ProjectForUpdateDto) SetAppEnabled(v bool) {
	o.AppEnabled = &v
}

// GetIsKubevapEnabled returns the IsKubevapEnabled field value if set, zero value otherwise.
func (o *ProjectForUpdateDto) GetIsKubevapEnabled() bool {
	if o == nil || IsNil(o.IsKubevapEnabled) {
		var ret bool
		return ret
	}
	return *o.IsKubevapEnabled
}

// GetIsKubevapEnabledOk returns a tuple with the IsKubevapEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectForUpdateDto) GetIsKubevapEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsKubevapEnabled) {
		return nil, false
	}
	return o.IsKubevapEnabled, true
}

// HasIsKubevapEnabled returns a boolean if a field has been set.
func (o *ProjectForUpdateDto) HasIsKubevapEnabled() bool {
	if o != nil && !IsNil(o.IsKubevapEnabled) {
		return true
	}

	return false
}

// SetIsKubevapEnabled gets a reference to the given bool and assigns it to the IsKubevapEnabled field.
func (o *ProjectForUpdateDto) SetIsKubevapEnabled(v bool) {
	o.IsKubevapEnabled = &v
}

// GetKubernetesCurrentVersion returns the KubernetesCurrentVersion field value if set, zero value otherwise.
func (o *ProjectForUpdateDto) GetKubernetesCurrentVersion() string {
	if o == nil || IsNil(o.KubernetesCurrentVersion) {
		var ret string
		return ret
	}
	return *o.KubernetesCurrentVersion
}

// GetKubernetesCurrentVersionOk returns a tuple with the KubernetesCurrentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectForUpdateDto) GetKubernetesCurrentVersionOk() (*string, bool) {
	if o == nil || IsNil(o.KubernetesCurrentVersion) {
		return nil, false
	}
	return o.KubernetesCurrentVersion, true
}

// HasKubernetesCurrentVersion returns a boolean if a field has been set.
func (o *ProjectForUpdateDto) HasKubernetesCurrentVersion() bool {
	if o != nil && !IsNil(o.KubernetesCurrentVersion) {
		return true
	}

	return false
}

// SetKubernetesCurrentVersion gets a reference to the given string and assigns it to the KubernetesCurrentVersion field.
func (o *ProjectForUpdateDto) SetKubernetesCurrentVersion(v string) {
	o.KubernetesCurrentVersion = &v
}

// GetFailureReason returns the FailureReason field value if set, zero value otherwise.
func (o *ProjectForUpdateDto) GetFailureReason() string {
	if o == nil || IsNil(o.FailureReason) {
		var ret string
		return ret
	}
	return *o.FailureReason
}

// GetFailureReasonOk returns a tuple with the FailureReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectForUpdateDto) GetFailureReasonOk() (*string, bool) {
	if o == nil || IsNil(o.FailureReason) {
		return nil, false
	}
	return o.FailureReason, true
}

// HasFailureReason returns a boolean if a field has been set.
func (o *ProjectForUpdateDto) HasFailureReason() bool {
	if o != nil && !IsNil(o.FailureReason) {
		return true
	}

	return false
}

// SetFailureReason gets a reference to the given string and assigns it to the FailureReason field.
func (o *ProjectForUpdateDto) SetFailureReason(v string) {
	o.FailureReason = &v
}

func (o ProjectForUpdateDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectForUpdateDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KubeConfig) {
		toSerialize["kubeConfig"] = o.KubeConfig
	}
	if !IsNil(o.KubesprayCurrentVersion) {
		toSerialize["kubesprayCurrentVersion"] = o.KubesprayCurrentVersion
	}
	if !IsNil(o.AccessIp) {
		toSerialize["accessIp"] = o.AccessIp
	}
	if !IsNil(o.ImageName) {
		toSerialize["imageName"] = o.ImageName
	}
	if !IsNil(o.MonitoringIp) {
		toSerialize["monitoringIp"] = o.MonitoringIp
	}
	if !IsNil(o.TanzuReleaseCurrentVersion) {
		toSerialize["tanzuReleaseCurrentVersion"] = o.TanzuReleaseCurrentVersion
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.Health) {
		toSerialize["health"] = o.Health
	}
	if !IsNil(o.IsBackupEnabled) {
		toSerialize["isBackupEnabled"] = o.IsBackupEnabled
	}
	if !IsNil(o.IsMonitoringEnabled) {
		toSerialize["isMonitoringEnabled"] = o.IsMonitoringEnabled
	}
	if !IsNil(o.IsOpaEnabled) {
		toSerialize["isOpaEnabled"] = o.IsOpaEnabled
	}
	if !IsNil(o.IsAutoUpgrade) {
		toSerialize["isAutoUpgrade"] = o.IsAutoUpgrade
	}
	if !IsNil(o.AppEnabled) {
		toSerialize["appEnabled"] = o.AppEnabled
	}
	if !IsNil(o.IsKubevapEnabled) {
		toSerialize["isKubevapEnabled"] = o.IsKubevapEnabled
	}
	if !IsNil(o.KubernetesCurrentVersion) {
		toSerialize["kubernetesCurrentVersion"] = o.KubernetesCurrentVersion
	}
	if !IsNil(o.FailureReason) {
		toSerialize["failureReason"] = o.FailureReason
	}
	return toSerialize, nil
}

type NullableProjectForUpdateDto struct {
	value *ProjectForUpdateDto
	isSet bool
}

func (v NullableProjectForUpdateDto) Get() *ProjectForUpdateDto {
	return v.value
}

func (v *NullableProjectForUpdateDto) Set(val *ProjectForUpdateDto) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectForUpdateDto) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectForUpdateDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectForUpdateDto(val *ProjectForUpdateDto) *NullableProjectForUpdateDto {
	return &NullableProjectForUpdateDto{value: val, isSet: true}
}

func (v NullableProjectForUpdateDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectForUpdateDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


