/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@itera.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikungoclient

import (
	"encoding/json"
	"fmt"
)

// CloudStatus the model 'CloudStatus'
type CloudStatus int32

// List of CloudStatus
const (
	CLOUDSTATUS__100 CloudStatus = 100
	CLOUDSTATUS__200 CloudStatus = 200
	CLOUDSTATUS__250 CloudStatus = 250
	CLOUDSTATUS__300 CloudStatus = 300
	CLOUDSTATUS__400 CloudStatus = 400
	CLOUDSTATUS__500 CloudStatus = 500
	CLOUDSTATUS__600 CloudStatus = 600
	CLOUDSTATUS__700 CloudStatus = 700
	CLOUDSTATUS__800 CloudStatus = 800
)

// All allowed values of CloudStatus enum
var AllowedCloudStatusEnumValues = []CloudStatus{
	100,
	200,
	250,
	300,
	400,
	500,
	600,
	700,
	800,
}

func (v *CloudStatus) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CloudStatus(value)
	for _, existing := range AllowedCloudStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CloudStatus", value)
}

// NewCloudStatusFromValue returns a pointer to a valid CloudStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCloudStatusFromValue(v int32) (*CloudStatus, error) {
	ev := CloudStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CloudStatus: valid values are %v", v, AllowedCloudStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CloudStatus) IsValid() bool {
	for _, existing := range AllowedCloudStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CloudStatus value
func (v CloudStatus) Ptr() *CloudStatus {
	return &v
}

type NullableCloudStatus struct {
	value *CloudStatus
	isSet bool
}

func (v NullableCloudStatus) Get() *CloudStatus {
	return v.value
}

func (v *NullableCloudStatus) Set(val *CloudStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudStatus(val *CloudStatus) *NullableCloudStatus {
	return &NullableCloudStatus{value: val, isSet: true}
}

func (v NullableCloudStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

