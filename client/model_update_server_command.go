/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@itera.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the UpdateServerCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateServerCommand{}

// UpdateServerCommand struct for UpdateServerCommand
type UpdateServerCommand struct {
	Id int32 `json:"id"`
	Ip string `json:"ip"`
	InstanceId *string `json:"instanceId,omitempty"`
	ProviderID *string `json:"providerID,omitempty"`
	AwsHostName *string `json:"awsHostName,omitempty"`
}

// NewUpdateServerCommand instantiates a new UpdateServerCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateServerCommand(id int32, ip string) *UpdateServerCommand {
	this := UpdateServerCommand{}
	this.Id = id
	this.Ip = ip
	return &this
}

// NewUpdateServerCommandWithDefaults instantiates a new UpdateServerCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateServerCommandWithDefaults() *UpdateServerCommand {
	this := UpdateServerCommand{}
	return &this
}

// GetId returns the Id field value
func (o *UpdateServerCommand) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpdateServerCommand) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpdateServerCommand) SetId(v int32) {
	o.Id = v
}

// GetIp returns the Ip field value
func (o *UpdateServerCommand) GetIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *UpdateServerCommand) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ip, true
}

// SetIp sets field value
func (o *UpdateServerCommand) SetIp(v string) {
	o.Ip = v
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise.
func (o *UpdateServerCommand) GetInstanceId() string {
	if o == nil || IsNil(o.InstanceId) {
		var ret string
		return ret
	}
	return *o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServerCommand) GetInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceId) {
		return nil, false
	}
	return o.InstanceId, true
}

// HasInstanceId returns a boolean if a field has been set.
func (o *UpdateServerCommand) HasInstanceId() bool {
	if o != nil && !IsNil(o.InstanceId) {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given string and assigns it to the InstanceId field.
func (o *UpdateServerCommand) SetInstanceId(v string) {
	o.InstanceId = &v
}

// GetProviderID returns the ProviderID field value if set, zero value otherwise.
func (o *UpdateServerCommand) GetProviderID() string {
	if o == nil || IsNil(o.ProviderID) {
		var ret string
		return ret
	}
	return *o.ProviderID
}

// GetProviderIDOk returns a tuple with the ProviderID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServerCommand) GetProviderIDOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderID) {
		return nil, false
	}
	return o.ProviderID, true
}

// HasProviderID returns a boolean if a field has been set.
func (o *UpdateServerCommand) HasProviderID() bool {
	if o != nil && !IsNil(o.ProviderID) {
		return true
	}

	return false
}

// SetProviderID gets a reference to the given string and assigns it to the ProviderID field.
func (o *UpdateServerCommand) SetProviderID(v string) {
	o.ProviderID = &v
}

// GetAwsHostName returns the AwsHostName field value if set, zero value otherwise.
func (o *UpdateServerCommand) GetAwsHostName() string {
	if o == nil || IsNil(o.AwsHostName) {
		var ret string
		return ret
	}
	return *o.AwsHostName
}

// GetAwsHostNameOk returns a tuple with the AwsHostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateServerCommand) GetAwsHostNameOk() (*string, bool) {
	if o == nil || IsNil(o.AwsHostName) {
		return nil, false
	}
	return o.AwsHostName, true
}

// HasAwsHostName returns a boolean if a field has been set.
func (o *UpdateServerCommand) HasAwsHostName() bool {
	if o != nil && !IsNil(o.AwsHostName) {
		return true
	}

	return false
}

// SetAwsHostName gets a reference to the given string and assigns it to the AwsHostName field.
func (o *UpdateServerCommand) SetAwsHostName(v string) {
	o.AwsHostName = &v
}

func (o UpdateServerCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateServerCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["ip"] = o.Ip
	if !IsNil(o.InstanceId) {
		toSerialize["instanceId"] = o.InstanceId
	}
	if !IsNil(o.ProviderID) {
		toSerialize["providerID"] = o.ProviderID
	}
	if !IsNil(o.AwsHostName) {
		toSerialize["awsHostName"] = o.AwsHostName
	}
	return toSerialize, nil
}

type NullableUpdateServerCommand struct {
	value *UpdateServerCommand
	isSet bool
}

func (v NullableUpdateServerCommand) Get() *UpdateServerCommand {
	return v.value
}

func (v *NullableUpdateServerCommand) Set(val *UpdateServerCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateServerCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateServerCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateServerCommand(val *UpdateServerCommand) *NullableUpdateServerCommand {
	return &NullableUpdateServerCommand{value: val, isSet: true}
}

func (v NullableUpdateServerCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateServerCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


