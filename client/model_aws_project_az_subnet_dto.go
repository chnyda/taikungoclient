/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@itera.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the AwsProjectAZSubnetDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsProjectAZSubnetDto{}

// AwsProjectAZSubnetDto struct for AwsProjectAZSubnetDto
type AwsProjectAZSubnetDto struct {
	Zone *string `json:"zone,omitempty"`
	PublicIp *string `json:"publicIp,omitempty"`
	PrivateIp *string `json:"privateIp,omitempty"`
}

// NewAwsProjectAZSubnetDto instantiates a new AwsProjectAZSubnetDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsProjectAZSubnetDto() *AwsProjectAZSubnetDto {
	this := AwsProjectAZSubnetDto{}
	return &this
}

// NewAwsProjectAZSubnetDtoWithDefaults instantiates a new AwsProjectAZSubnetDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsProjectAZSubnetDtoWithDefaults() *AwsProjectAZSubnetDto {
	this := AwsProjectAZSubnetDto{}
	return &this
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *AwsProjectAZSubnetDto) GetZone() string {
	if o == nil || IsNil(o.Zone) {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsProjectAZSubnetDto) GetZoneOk() (*string, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *AwsProjectAZSubnetDto) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *AwsProjectAZSubnetDto) SetZone(v string) {
	o.Zone = &v
}

// GetPublicIp returns the PublicIp field value if set, zero value otherwise.
func (o *AwsProjectAZSubnetDto) GetPublicIp() string {
	if o == nil || IsNil(o.PublicIp) {
		var ret string
		return ret
	}
	return *o.PublicIp
}

// GetPublicIpOk returns a tuple with the PublicIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsProjectAZSubnetDto) GetPublicIpOk() (*string, bool) {
	if o == nil || IsNil(o.PublicIp) {
		return nil, false
	}
	return o.PublicIp, true
}

// HasPublicIp returns a boolean if a field has been set.
func (o *AwsProjectAZSubnetDto) HasPublicIp() bool {
	if o != nil && !IsNil(o.PublicIp) {
		return true
	}

	return false
}

// SetPublicIp gets a reference to the given string and assigns it to the PublicIp field.
func (o *AwsProjectAZSubnetDto) SetPublicIp(v string) {
	o.PublicIp = &v
}

// GetPrivateIp returns the PrivateIp field value if set, zero value otherwise.
func (o *AwsProjectAZSubnetDto) GetPrivateIp() string {
	if o == nil || IsNil(o.PrivateIp) {
		var ret string
		return ret
	}
	return *o.PrivateIp
}

// GetPrivateIpOk returns a tuple with the PrivateIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsProjectAZSubnetDto) GetPrivateIpOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateIp) {
		return nil, false
	}
	return o.PrivateIp, true
}

// HasPrivateIp returns a boolean if a field has been set.
func (o *AwsProjectAZSubnetDto) HasPrivateIp() bool {
	if o != nil && !IsNil(o.PrivateIp) {
		return true
	}

	return false
}

// SetPrivateIp gets a reference to the given string and assigns it to the PrivateIp field.
func (o *AwsProjectAZSubnetDto) SetPrivateIp(v string) {
	o.PrivateIp = &v
}

func (o AwsProjectAZSubnetDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsProjectAZSubnetDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	if !IsNil(o.PublicIp) {
		toSerialize["publicIp"] = o.PublicIp
	}
	if !IsNil(o.PrivateIp) {
		toSerialize["privateIp"] = o.PrivateIp
	}
	return toSerialize, nil
}

type NullableAwsProjectAZSubnetDto struct {
	value *AwsProjectAZSubnetDto
	isSet bool
}

func (v NullableAwsProjectAZSubnetDto) Get() *AwsProjectAZSubnetDto {
	return v.value
}

func (v *NullableAwsProjectAZSubnetDto) Set(val *AwsProjectAZSubnetDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsProjectAZSubnetDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsProjectAZSubnetDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsProjectAZSubnetDto(val *AwsProjectAZSubnetDto) *NullableAwsProjectAZSubnetDto {
	return &NullableAwsProjectAZSubnetDto{value: val, isSet: true}
}

func (v NullableAwsProjectAZSubnetDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsProjectAZSubnetDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


