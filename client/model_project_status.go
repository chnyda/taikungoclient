/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@itera.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"fmt"
)

// ProjectStatus the model 'ProjectStatus'
type ProjectStatus int32

// List of ProjectStatus
const (
	PROJECTSTATUS__100 ProjectStatus = 100
	PROJECTSTATUS__145 ProjectStatus = 145
	PROJECTSTATUS__150 ProjectStatus = 150
	PROJECTSTATUS__154 ProjectStatus = 154
	PROJECTSTATUS__155 ProjectStatus = 155
	PROJECTSTATUS__156 ProjectStatus = 156
	PROJECTSTATUS__160 ProjectStatus = 160
	PROJECTSTATUS__165 ProjectStatus = 165
	PROJECTSTATUS__200 ProjectStatus = 200
	PROJECTSTATUS__250 ProjectStatus = 250
	PROJECTSTATUS__300 ProjectStatus = 300
	PROJECTSTATUS__400 ProjectStatus = 400
	PROJECTSTATUS__500 ProjectStatus = 500
	PROJECTSTATUS__550 ProjectStatus = 550
	PROJECTSTATUS__600 ProjectStatus = 600
	PROJECTSTATUS__700 ProjectStatus = 700
	PROJECTSTATUS__800 ProjectStatus = 800
	PROJECTSTATUS__900 ProjectStatus = 900
	PROJECTSTATUS__1000 ProjectStatus = 1000
	PROJECTSTATUS__1100 ProjectStatus = 1100
)

// All allowed values of ProjectStatus enum
var AllowedProjectStatusEnumValues = []ProjectStatus{
	100,
	145,
	150,
	154,
	155,
	156,
	160,
	165,
	200,
	250,
	300,
	400,
	500,
	550,
	600,
	700,
	800,
	900,
	1000,
	1100,
}

func (v *ProjectStatus) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProjectStatus(value)
	for _, existing := range AllowedProjectStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProjectStatus", value)
}

// NewProjectStatusFromValue returns a pointer to a valid ProjectStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProjectStatusFromValue(v int32) (*ProjectStatus, error) {
	ev := ProjectStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProjectStatus: valid values are %v", v, AllowedProjectStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProjectStatus) IsValid() bool {
	for _, existing := range AllowedProjectStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProjectStatus value
func (v ProjectStatus) Ptr() *ProjectStatus {
	return &v
}

type NullableProjectStatus struct {
	value *ProjectStatus
	isSet bool
}

func (v NullableProjectStatus) Get() *ProjectStatus {
	return v.value
}

func (v *NullableProjectStatus) Set(val *ProjectStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectStatus(val *ProjectStatus) *NullableProjectStatus {
	return &NullableProjectStatus{value: val, isSet: true}
}

func (v NullableProjectStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

