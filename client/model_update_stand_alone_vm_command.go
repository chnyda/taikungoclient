/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@itera.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the UpdateStandAloneVmCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateStandAloneVmCommand{}

// UpdateStandAloneVmCommand struct for UpdateStandAloneVmCommand
type UpdateStandAloneVmCommand struct {
	Id int32 `json:"id"`
	IpAddress *string `json:"ipAddress,omitempty"`
	PublicIp *string `json:"publicIp,omitempty"`
	InstanceId *string `json:"instanceId,omitempty"`
	FlavorId *string `json:"flavorId,omitempty"`
	Revision *int32 `json:"revision,omitempty"`
	Disks []UpdateStandAloneVmDiskDto `json:"disks,omitempty"`
}

// NewUpdateStandAloneVmCommand instantiates a new UpdateStandAloneVmCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateStandAloneVmCommand(id int32) *UpdateStandAloneVmCommand {
	this := UpdateStandAloneVmCommand{}
	this.Id = id
	return &this
}

// NewUpdateStandAloneVmCommandWithDefaults instantiates a new UpdateStandAloneVmCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateStandAloneVmCommandWithDefaults() *UpdateStandAloneVmCommand {
	this := UpdateStandAloneVmCommand{}
	return &this
}

// GetId returns the Id field value
func (o *UpdateStandAloneVmCommand) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpdateStandAloneVmCommand) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpdateStandAloneVmCommand) SetId(v int32) {
	o.Id = v
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise.
func (o *UpdateStandAloneVmCommand) GetIpAddress() string {
	if o == nil || IsNil(o.IpAddress) {
		var ret string
		return ret
	}
	return *o.IpAddress
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStandAloneVmCommand) GetIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IpAddress) {
		return nil, false
	}
	return o.IpAddress, true
}

// HasIpAddress returns a boolean if a field has been set.
func (o *UpdateStandAloneVmCommand) HasIpAddress() bool {
	if o != nil && !IsNil(o.IpAddress) {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given string and assigns it to the IpAddress field.
func (o *UpdateStandAloneVmCommand) SetIpAddress(v string) {
	o.IpAddress = &v
}

// GetPublicIp returns the PublicIp field value if set, zero value otherwise.
func (o *UpdateStandAloneVmCommand) GetPublicIp() string {
	if o == nil || IsNil(o.PublicIp) {
		var ret string
		return ret
	}
	return *o.PublicIp
}

// GetPublicIpOk returns a tuple with the PublicIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStandAloneVmCommand) GetPublicIpOk() (*string, bool) {
	if o == nil || IsNil(o.PublicIp) {
		return nil, false
	}
	return o.PublicIp, true
}

// HasPublicIp returns a boolean if a field has been set.
func (o *UpdateStandAloneVmCommand) HasPublicIp() bool {
	if o != nil && !IsNil(o.PublicIp) {
		return true
	}

	return false
}

// SetPublicIp gets a reference to the given string and assigns it to the PublicIp field.
func (o *UpdateStandAloneVmCommand) SetPublicIp(v string) {
	o.PublicIp = &v
}

// GetInstanceId returns the InstanceId field value if set, zero value otherwise.
func (o *UpdateStandAloneVmCommand) GetInstanceId() string {
	if o == nil || IsNil(o.InstanceId) {
		var ret string
		return ret
	}
	return *o.InstanceId
}

// GetInstanceIdOk returns a tuple with the InstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStandAloneVmCommand) GetInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.InstanceId) {
		return nil, false
	}
	return o.InstanceId, true
}

// HasInstanceId returns a boolean if a field has been set.
func (o *UpdateStandAloneVmCommand) HasInstanceId() bool {
	if o != nil && !IsNil(o.InstanceId) {
		return true
	}

	return false
}

// SetInstanceId gets a reference to the given string and assigns it to the InstanceId field.
func (o *UpdateStandAloneVmCommand) SetInstanceId(v string) {
	o.InstanceId = &v
}

// GetFlavorId returns the FlavorId field value if set, zero value otherwise.
func (o *UpdateStandAloneVmCommand) GetFlavorId() string {
	if o == nil || IsNil(o.FlavorId) {
		var ret string
		return ret
	}
	return *o.FlavorId
}

// GetFlavorIdOk returns a tuple with the FlavorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStandAloneVmCommand) GetFlavorIdOk() (*string, bool) {
	if o == nil || IsNil(o.FlavorId) {
		return nil, false
	}
	return o.FlavorId, true
}

// HasFlavorId returns a boolean if a field has been set.
func (o *UpdateStandAloneVmCommand) HasFlavorId() bool {
	if o != nil && !IsNil(o.FlavorId) {
		return true
	}

	return false
}

// SetFlavorId gets a reference to the given string and assigns it to the FlavorId field.
func (o *UpdateStandAloneVmCommand) SetFlavorId(v string) {
	o.FlavorId = &v
}

// GetRevision returns the Revision field value if set, zero value otherwise.
func (o *UpdateStandAloneVmCommand) GetRevision() int32 {
	if o == nil || IsNil(o.Revision) {
		var ret int32
		return ret
	}
	return *o.Revision
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStandAloneVmCommand) GetRevisionOk() (*int32, bool) {
	if o == nil || IsNil(o.Revision) {
		return nil, false
	}
	return o.Revision, true
}

// HasRevision returns a boolean if a field has been set.
func (o *UpdateStandAloneVmCommand) HasRevision() bool {
	if o != nil && !IsNil(o.Revision) {
		return true
	}

	return false
}

// SetRevision gets a reference to the given int32 and assigns it to the Revision field.
func (o *UpdateStandAloneVmCommand) SetRevision(v int32) {
	o.Revision = &v
}

// GetDisks returns the Disks field value if set, zero value otherwise.
func (o *UpdateStandAloneVmCommand) GetDisks() []UpdateStandAloneVmDiskDto {
	if o == nil || IsNil(o.Disks) {
		var ret []UpdateStandAloneVmDiskDto
		return ret
	}
	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStandAloneVmCommand) GetDisksOk() ([]UpdateStandAloneVmDiskDto, bool) {
	if o == nil || IsNil(o.Disks) {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *UpdateStandAloneVmCommand) HasDisks() bool {
	if o != nil && !IsNil(o.Disks) {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []UpdateStandAloneVmDiskDto and assigns it to the Disks field.
func (o *UpdateStandAloneVmCommand) SetDisks(v []UpdateStandAloneVmDiskDto) {
	o.Disks = v
}

func (o UpdateStandAloneVmCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateStandAloneVmCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.IpAddress) {
		toSerialize["ipAddress"] = o.IpAddress
	}
	if !IsNil(o.PublicIp) {
		toSerialize["publicIp"] = o.PublicIp
	}
	if !IsNil(o.InstanceId) {
		toSerialize["instanceId"] = o.InstanceId
	}
	if !IsNil(o.FlavorId) {
		toSerialize["flavorId"] = o.FlavorId
	}
	if !IsNil(o.Revision) {
		toSerialize["revision"] = o.Revision
	}
	if !IsNil(o.Disks) {
		toSerialize["disks"] = o.Disks
	}
	return toSerialize, nil
}

type NullableUpdateStandAloneVmCommand struct {
	value *UpdateStandAloneVmCommand
	isSet bool
}

func (v NullableUpdateStandAloneVmCommand) Get() *UpdateStandAloneVmCommand {
	return v.value
}

func (v *NullableUpdateStandAloneVmCommand) Set(val *UpdateStandAloneVmCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateStandAloneVmCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateStandAloneVmCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateStandAloneVmCommand(val *UpdateStandAloneVmCommand) *NullableUpdateStandAloneVmCommand {
	return &NullableUpdateStandAloneVmCommand{value: val, isSet: true}
}

func (v NullableUpdateStandAloneVmCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateStandAloneVmCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


