/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@itera.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the AvailablePackagesDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AvailablePackagesDto{}

// AvailablePackagesDto struct for AvailablePackagesDto
type AvailablePackagesDto struct {
	PackageId *string `json:"packageId,omitempty"`
	CatalogAppId *int32 `json:"catalogAppId,omitempty"`
	InstalledInstanceCount *int32 `json:"installedInstanceCount,omitempty"`
	Name *string `json:"name,omitempty"`
	NormalizedName *string `json:"normalizedName,omitempty"`
	LogoImageId *string `json:"logoImageId,omitempty"`
	Stars *int64 `json:"stars,omitempty"`
	Description *string `json:"description,omitempty"`
	Version *string `json:"version,omitempty"`
	AppVersion *string `json:"appVersion,omitempty"`
	Deprecated *bool `json:"deprecated,omitempty"`
	Signed *bool `json:"signed,omitempty"`
	IsLocked *bool `json:"isLocked,omitempty"`
	SecurityReportSummary *SecurityReportSummary `json:"securityReportSummary,omitempty"`
	Ts *string `json:"ts,omitempty"`
	Repository *Repository `json:"repository,omitempty"`
}

// NewAvailablePackagesDto instantiates a new AvailablePackagesDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAvailablePackagesDto() *AvailablePackagesDto {
	this := AvailablePackagesDto{}
	return &this
}

// NewAvailablePackagesDtoWithDefaults instantiates a new AvailablePackagesDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAvailablePackagesDtoWithDefaults() *AvailablePackagesDto {
	this := AvailablePackagesDto{}
	return &this
}

// GetPackageId returns the PackageId field value if set, zero value otherwise.
func (o *AvailablePackagesDto) GetPackageId() string {
	if o == nil || IsNil(o.PackageId) {
		var ret string
		return ret
	}
	return *o.PackageId
}

// GetPackageIdOk returns a tuple with the PackageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePackagesDto) GetPackageIdOk() (*string, bool) {
	if o == nil || IsNil(o.PackageId) {
		return nil, false
	}
	return o.PackageId, true
}

// HasPackageId returns a boolean if a field has been set.
func (o *AvailablePackagesDto) HasPackageId() bool {
	if o != nil && !IsNil(o.PackageId) {
		return true
	}

	return false
}

// SetPackageId gets a reference to the given string and assigns it to the PackageId field.
func (o *AvailablePackagesDto) SetPackageId(v string) {
	o.PackageId = &v
}

// GetCatalogAppId returns the CatalogAppId field value if set, zero value otherwise.
func (o *AvailablePackagesDto) GetCatalogAppId() int32 {
	if o == nil || IsNil(o.CatalogAppId) {
		var ret int32
		return ret
	}
	return *o.CatalogAppId
}

// GetCatalogAppIdOk returns a tuple with the CatalogAppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePackagesDto) GetCatalogAppIdOk() (*int32, bool) {
	if o == nil || IsNil(o.CatalogAppId) {
		return nil, false
	}
	return o.CatalogAppId, true
}

// HasCatalogAppId returns a boolean if a field has been set.
func (o *AvailablePackagesDto) HasCatalogAppId() bool {
	if o != nil && !IsNil(o.CatalogAppId) {
		return true
	}

	return false
}

// SetCatalogAppId gets a reference to the given int32 and assigns it to the CatalogAppId field.
func (o *AvailablePackagesDto) SetCatalogAppId(v int32) {
	o.CatalogAppId = &v
}

// GetInstalledInstanceCount returns the InstalledInstanceCount field value if set, zero value otherwise.
func (o *AvailablePackagesDto) GetInstalledInstanceCount() int32 {
	if o == nil || IsNil(o.InstalledInstanceCount) {
		var ret int32
		return ret
	}
	return *o.InstalledInstanceCount
}

// GetInstalledInstanceCountOk returns a tuple with the InstalledInstanceCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePackagesDto) GetInstalledInstanceCountOk() (*int32, bool) {
	if o == nil || IsNil(o.InstalledInstanceCount) {
		return nil, false
	}
	return o.InstalledInstanceCount, true
}

// HasInstalledInstanceCount returns a boolean if a field has been set.
func (o *AvailablePackagesDto) HasInstalledInstanceCount() bool {
	if o != nil && !IsNil(o.InstalledInstanceCount) {
		return true
	}

	return false
}

// SetInstalledInstanceCount gets a reference to the given int32 and assigns it to the InstalledInstanceCount field.
func (o *AvailablePackagesDto) SetInstalledInstanceCount(v int32) {
	o.InstalledInstanceCount = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AvailablePackagesDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePackagesDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AvailablePackagesDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AvailablePackagesDto) SetName(v string) {
	o.Name = &v
}

// GetNormalizedName returns the NormalizedName field value if set, zero value otherwise.
func (o *AvailablePackagesDto) GetNormalizedName() string {
	if o == nil || IsNil(o.NormalizedName) {
		var ret string
		return ret
	}
	return *o.NormalizedName
}

// GetNormalizedNameOk returns a tuple with the NormalizedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePackagesDto) GetNormalizedNameOk() (*string, bool) {
	if o == nil || IsNil(o.NormalizedName) {
		return nil, false
	}
	return o.NormalizedName, true
}

// HasNormalizedName returns a boolean if a field has been set.
func (o *AvailablePackagesDto) HasNormalizedName() bool {
	if o != nil && !IsNil(o.NormalizedName) {
		return true
	}

	return false
}

// SetNormalizedName gets a reference to the given string and assigns it to the NormalizedName field.
func (o *AvailablePackagesDto) SetNormalizedName(v string) {
	o.NormalizedName = &v
}

// GetLogoImageId returns the LogoImageId field value if set, zero value otherwise.
func (o *AvailablePackagesDto) GetLogoImageId() string {
	if o == nil || IsNil(o.LogoImageId) {
		var ret string
		return ret
	}
	return *o.LogoImageId
}

// GetLogoImageIdOk returns a tuple with the LogoImageId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePackagesDto) GetLogoImageIdOk() (*string, bool) {
	if o == nil || IsNil(o.LogoImageId) {
		return nil, false
	}
	return o.LogoImageId, true
}

// HasLogoImageId returns a boolean if a field has been set.
func (o *AvailablePackagesDto) HasLogoImageId() bool {
	if o != nil && !IsNil(o.LogoImageId) {
		return true
	}

	return false
}

// SetLogoImageId gets a reference to the given string and assigns it to the LogoImageId field.
func (o *AvailablePackagesDto) SetLogoImageId(v string) {
	o.LogoImageId = &v
}

// GetStars returns the Stars field value if set, zero value otherwise.
func (o *AvailablePackagesDto) GetStars() int64 {
	if o == nil || IsNil(o.Stars) {
		var ret int64
		return ret
	}
	return *o.Stars
}

// GetStarsOk returns a tuple with the Stars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePackagesDto) GetStarsOk() (*int64, bool) {
	if o == nil || IsNil(o.Stars) {
		return nil, false
	}
	return o.Stars, true
}

// HasStars returns a boolean if a field has been set.
func (o *AvailablePackagesDto) HasStars() bool {
	if o != nil && !IsNil(o.Stars) {
		return true
	}

	return false
}

// SetStars gets a reference to the given int64 and assigns it to the Stars field.
func (o *AvailablePackagesDto) SetStars(v int64) {
	o.Stars = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AvailablePackagesDto) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePackagesDto) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AvailablePackagesDto) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AvailablePackagesDto) SetDescription(v string) {
	o.Description = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AvailablePackagesDto) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePackagesDto) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AvailablePackagesDto) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *AvailablePackagesDto) SetVersion(v string) {
	o.Version = &v
}

// GetAppVersion returns the AppVersion field value if set, zero value otherwise.
func (o *AvailablePackagesDto) GetAppVersion() string {
	if o == nil || IsNil(o.AppVersion) {
		var ret string
		return ret
	}
	return *o.AppVersion
}

// GetAppVersionOk returns a tuple with the AppVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePackagesDto) GetAppVersionOk() (*string, bool) {
	if o == nil || IsNil(o.AppVersion) {
		return nil, false
	}
	return o.AppVersion, true
}

// HasAppVersion returns a boolean if a field has been set.
func (o *AvailablePackagesDto) HasAppVersion() bool {
	if o != nil && !IsNil(o.AppVersion) {
		return true
	}

	return false
}

// SetAppVersion gets a reference to the given string and assigns it to the AppVersion field.
func (o *AvailablePackagesDto) SetAppVersion(v string) {
	o.AppVersion = &v
}

// GetDeprecated returns the Deprecated field value if set, zero value otherwise.
func (o *AvailablePackagesDto) GetDeprecated() bool {
	if o == nil || IsNil(o.Deprecated) {
		var ret bool
		return ret
	}
	return *o.Deprecated
}

// GetDeprecatedOk returns a tuple with the Deprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePackagesDto) GetDeprecatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Deprecated) {
		return nil, false
	}
	return o.Deprecated, true
}

// HasDeprecated returns a boolean if a field has been set.
func (o *AvailablePackagesDto) HasDeprecated() bool {
	if o != nil && !IsNil(o.Deprecated) {
		return true
	}

	return false
}

// SetDeprecated gets a reference to the given bool and assigns it to the Deprecated field.
func (o *AvailablePackagesDto) SetDeprecated(v bool) {
	o.Deprecated = &v
}

// GetSigned returns the Signed field value if set, zero value otherwise.
func (o *AvailablePackagesDto) GetSigned() bool {
	if o == nil || IsNil(o.Signed) {
		var ret bool
		return ret
	}
	return *o.Signed
}

// GetSignedOk returns a tuple with the Signed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePackagesDto) GetSignedOk() (*bool, bool) {
	if o == nil || IsNil(o.Signed) {
		return nil, false
	}
	return o.Signed, true
}

// HasSigned returns a boolean if a field has been set.
func (o *AvailablePackagesDto) HasSigned() bool {
	if o != nil && !IsNil(o.Signed) {
		return true
	}

	return false
}

// SetSigned gets a reference to the given bool and assigns it to the Signed field.
func (o *AvailablePackagesDto) SetSigned(v bool) {
	o.Signed = &v
}

// GetIsLocked returns the IsLocked field value if set, zero value otherwise.
func (o *AvailablePackagesDto) GetIsLocked() bool {
	if o == nil || IsNil(o.IsLocked) {
		var ret bool
		return ret
	}
	return *o.IsLocked
}

// GetIsLockedOk returns a tuple with the IsLocked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePackagesDto) GetIsLockedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsLocked) {
		return nil, false
	}
	return o.IsLocked, true
}

// HasIsLocked returns a boolean if a field has been set.
func (o *AvailablePackagesDto) HasIsLocked() bool {
	if o != nil && !IsNil(o.IsLocked) {
		return true
	}

	return false
}

// SetIsLocked gets a reference to the given bool and assigns it to the IsLocked field.
func (o *AvailablePackagesDto) SetIsLocked(v bool) {
	o.IsLocked = &v
}

// GetSecurityReportSummary returns the SecurityReportSummary field value if set, zero value otherwise.
func (o *AvailablePackagesDto) GetSecurityReportSummary() SecurityReportSummary {
	if o == nil || IsNil(o.SecurityReportSummary) {
		var ret SecurityReportSummary
		return ret
	}
	return *o.SecurityReportSummary
}

// GetSecurityReportSummaryOk returns a tuple with the SecurityReportSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePackagesDto) GetSecurityReportSummaryOk() (*SecurityReportSummary, bool) {
	if o == nil || IsNil(o.SecurityReportSummary) {
		return nil, false
	}
	return o.SecurityReportSummary, true
}

// HasSecurityReportSummary returns a boolean if a field has been set.
func (o *AvailablePackagesDto) HasSecurityReportSummary() bool {
	if o != nil && !IsNil(o.SecurityReportSummary) {
		return true
	}

	return false
}

// SetSecurityReportSummary gets a reference to the given SecurityReportSummary and assigns it to the SecurityReportSummary field.
func (o *AvailablePackagesDto) SetSecurityReportSummary(v SecurityReportSummary) {
	o.SecurityReportSummary = &v
}

// GetTs returns the Ts field value if set, zero value otherwise.
func (o *AvailablePackagesDto) GetTs() string {
	if o == nil || IsNil(o.Ts) {
		var ret string
		return ret
	}
	return *o.Ts
}

// GetTsOk returns a tuple with the Ts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePackagesDto) GetTsOk() (*string, bool) {
	if o == nil || IsNil(o.Ts) {
		return nil, false
	}
	return o.Ts, true
}

// HasTs returns a boolean if a field has been set.
func (o *AvailablePackagesDto) HasTs() bool {
	if o != nil && !IsNil(o.Ts) {
		return true
	}

	return false
}

// SetTs gets a reference to the given string and assigns it to the Ts field.
func (o *AvailablePackagesDto) SetTs(v string) {
	o.Ts = &v
}

// GetRepository returns the Repository field value if set, zero value otherwise.
func (o *AvailablePackagesDto) GetRepository() Repository {
	if o == nil || IsNil(o.Repository) {
		var ret Repository
		return ret
	}
	return *o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AvailablePackagesDto) GetRepositoryOk() (*Repository, bool) {
	if o == nil || IsNil(o.Repository) {
		return nil, false
	}
	return o.Repository, true
}

// HasRepository returns a boolean if a field has been set.
func (o *AvailablePackagesDto) HasRepository() bool {
	if o != nil && !IsNil(o.Repository) {
		return true
	}

	return false
}

// SetRepository gets a reference to the given Repository and assigns it to the Repository field.
func (o *AvailablePackagesDto) SetRepository(v Repository) {
	o.Repository = &v
}

func (o AvailablePackagesDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AvailablePackagesDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PackageId) {
		toSerialize["packageId"] = o.PackageId
	}
	if !IsNil(o.CatalogAppId) {
		toSerialize["catalogAppId"] = o.CatalogAppId
	}
	if !IsNil(o.InstalledInstanceCount) {
		toSerialize["installedInstanceCount"] = o.InstalledInstanceCount
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NormalizedName) {
		toSerialize["normalizedName"] = o.NormalizedName
	}
	if !IsNil(o.LogoImageId) {
		toSerialize["logoImageId"] = o.LogoImageId
	}
	if !IsNil(o.Stars) {
		toSerialize["stars"] = o.Stars
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.AppVersion) {
		toSerialize["appVersion"] = o.AppVersion
	}
	if !IsNil(o.Deprecated) {
		toSerialize["deprecated"] = o.Deprecated
	}
	if !IsNil(o.Signed) {
		toSerialize["signed"] = o.Signed
	}
	if !IsNil(o.IsLocked) {
		toSerialize["isLocked"] = o.IsLocked
	}
	if !IsNil(o.SecurityReportSummary) {
		toSerialize["securityReportSummary"] = o.SecurityReportSummary
	}
	if !IsNil(o.Ts) {
		toSerialize["ts"] = o.Ts
	}
	if !IsNil(o.Repository) {
		toSerialize["repository"] = o.Repository
	}
	return toSerialize, nil
}

type NullableAvailablePackagesDto struct {
	value *AvailablePackagesDto
	isSet bool
}

func (v NullableAvailablePackagesDto) Get() *AvailablePackagesDto {
	return v.value
}

func (v *NullableAvailablePackagesDto) Set(val *AvailablePackagesDto) {
	v.value = val
	v.isSet = true
}

func (v NullableAvailablePackagesDto) IsSet() bool {
	return v.isSet
}

func (v *NullableAvailablePackagesDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAvailablePackagesDto(val *AvailablePackagesDto) *NullableAvailablePackagesDto {
	return &NullableAvailablePackagesDto{value: val, isSet: true}
}

func (v NullableAvailablePackagesDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAvailablePackagesDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


