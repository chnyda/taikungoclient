/*
Taikun - WebApi

Testing FlavorsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package taikuncore

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/chnyda/taikungoclient"
)

func Test_taikuncore_FlavorsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FlavorsApiService FlavorsAwsFlavors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cloudId int32
		var v string

		resp, httpRes, err := apiClient.FlavorsApi.FlavorsAwsFlavors(context.Background(), cloudId, v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlavorsApiService FlavorsAzureFlavors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cloudId int32
		var v string

		resp, httpRes, err := apiClient.FlavorsApi.FlavorsAzureFlavors(context.Background(), cloudId, v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlavorsApiService FlavorsBindToProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.FlavorsApi.FlavorsBindToProject(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlavorsApiService FlavorsDropdownRecordDtos", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		resp, httpRes, err := apiClient.FlavorsApi.FlavorsDropdownRecordDtos(context.Background(), v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlavorsApiService FlavorsGetSelectedFlavorsForProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		resp, httpRes, err := apiClient.FlavorsApi.FlavorsGetSelectedFlavorsForProject(context.Background(), v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlavorsApiService FlavorsGoogleFlavors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cloudId int32
		var v string

		resp, httpRes, err := apiClient.FlavorsApi.FlavorsGoogleFlavors(context.Background(), cloudId, v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlavorsApiService FlavorsOpenstackFlavors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cloudId int32
		var v string

		resp, httpRes, err := apiClient.FlavorsApi.FlavorsOpenstackFlavors(context.Background(), cloudId, v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlavorsApiService FlavorsProxmoxFlavors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cloudId int32
		var v string

		resp, httpRes, err := apiClient.FlavorsApi.FlavorsProxmoxFlavors(context.Background(), cloudId, v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlavorsApiService FlavorsTanzuFlavors", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var cloudId int32
		var v string

		resp, httpRes, err := apiClient.FlavorsApi.FlavorsTanzuFlavors(context.Background(), cloudId, v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlavorsApiService FlavorsUnbindFromProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.FlavorsApi.FlavorsUnbindFromProject(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
