/*
Taikun - WebApi

Testing BackupApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package taikuncore

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/chnyda/taikungoclient"
)

func Test_taikuncore_BackupApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test BackupApiService BackupBackupByName", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var name string
		var v string

		resp, httpRes, err := apiClient.BackupApi.BackupBackupByName(context.Background(), projectId, name, v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupApiService BackupClearProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.BackupApi.BackupClearProject(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupApiService BackupCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.BackupApi.BackupCreate(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupApiService BackupDeleteBackup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.BackupApi.BackupDeleteBackup(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupApiService BackupDeleteBackupLocation", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.BackupApi.BackupDeleteBackupLocation(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupApiService BackupDeleteRestore", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.BackupApi.BackupDeleteRestore(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupApiService BackupDeleteSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.BackupApi.BackupDeleteSchedule(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupApiService BackupDescribeBackup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var name string
		var v string

		resp, httpRes, err := apiClient.BackupApi.BackupDescribeBackup(context.Background(), projectId, name, v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupApiService BackupDescribeRestore", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var name string
		var v string

		resp, httpRes, err := apiClient.BackupApi.BackupDescribeRestore(context.Background(), projectId, name, v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupApiService BackupDescribeSchedule", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var name string
		var v string

		resp, httpRes, err := apiClient.BackupApi.BackupDescribeSchedule(context.Background(), projectId, name, v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupApiService BackupDisableBackup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.BackupApi.BackupDisableBackup(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupApiService BackupEnableBackup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.BackupApi.BackupEnableBackup(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupApiService BackupImportBackupStorage", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.BackupApi.BackupImportBackupStorage(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupApiService BackupListAllBackupStorages", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var v string

		resp, httpRes, err := apiClient.BackupApi.BackupListAllBackupStorages(context.Background(), projectId, v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupApiService BackupListAllBackups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var v string

		resp, httpRes, err := apiClient.BackupApi.BackupListAllBackups(context.Background(), projectId, v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupApiService BackupListAllDeleteBackupRequests", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var v string

		resp, httpRes, err := apiClient.BackupApi.BackupListAllDeleteBackupRequests(context.Background(), projectId, v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupApiService BackupListAllRestores", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var v string

		resp, httpRes, err := apiClient.BackupApi.BackupListAllRestores(context.Background(), projectId, v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupApiService BackupListAllSchedules", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var v string

		resp, httpRes, err := apiClient.BackupApi.BackupListAllSchedules(context.Background(), projectId, v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test BackupApiService BackupRestoreBackup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.BackupApi.BackupRestoreBackup(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
