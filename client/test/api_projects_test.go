/*
Taikun - WebApi

Testing ProjectsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package taikuncore

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/chnyda/taikungoclient"
)

func Test_taikuncore_ProjectsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProjectsApiService ProjectsCommit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var v string

		httpRes, err := apiClient.ProjectsApi.ProjectsCommit(context.Background(), projectId, v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		resp, httpRes, err := apiClient.ProjectsApi.ProjectsCreate(context.Background(), v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.ProjectsApi.ProjectsDelete(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsDeleteWholeProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.ProjectsApi.ProjectsDeleteWholeProject(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsDescribe", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var v string

		resp, httpRes, err := apiClient.ProjectsApi.ProjectsDescribe(context.Background(), projectId, v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var v string

		resp, httpRes, err := apiClient.ProjectsApi.ProjectsDetails(context.Background(), projectId, v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsEdit", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var v string

		httpRes, err := apiClient.ProjectsApi.ProjectsEdit(context.Background(), projectId, v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsEditHealthStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var v string

		httpRes, err := apiClient.ProjectsApi.ProjectsEditHealthStatus(context.Background(), projectId, v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsExtendLifeTime", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.ProjectsApi.ProjectsExtendLifeTime(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsFullSpotWorkersOperations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.ProjectsApi.ProjectsFullSpotWorkersOperations(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		resp, httpRes, err := apiClient.ProjectsApi.ProjectsList(context.Background(), v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsListForBilling", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		resp, httpRes, err := apiClient.ProjectsApi.ProjectsListForBilling(context.Background(), v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsListForPoller", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		resp, httpRes, err := apiClient.ProjectsApi.ProjectsListForPoller(context.Background(), v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsListSelector", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		resp, httpRes, err := apiClient.ProjectsApi.ProjectsListSelector(context.Background(), v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsListWithAlerts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		resp, httpRes, err := apiClient.ProjectsApi.ProjectsListWithAlerts(context.Background(), v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsLockManager", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.ProjectsApi.ProjectsLockManager(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsLokiLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.ProjectsApi.ProjectsLokiLogs(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsMonitoringOperations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.ProjectsApi.ProjectsMonitoringOperations(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsProjectActionButtonVisibility", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var v string

		resp, httpRes, err := apiClient.ProjectsApi.ProjectsProjectActionButtonVisibility(context.Background(), projectId, v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsProjectMonitoringAlerts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		resp, httpRes, err := apiClient.ProjectsApi.ProjectsProjectMonitoringAlerts(context.Background(), v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsPrometheusMetrics", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		resp, httpRes, err := apiClient.ProjectsApi.ProjectsPrometheusMetrics(context.Background(), v).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsPurge", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.ProjectsApi.ProjectsPurge(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsPurgeWholeProject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.ProjectsApi.ProjectsPurgeWholeProject(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsRepair", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var v string

		httpRes, err := apiClient.ProjectsApi.ProjectsRepair(context.Background(), projectId, v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsResetProjectStatus", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.ProjectsApi.ProjectsResetProjectStatus(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsSpotVmsOperations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.ProjectsApi.ProjectsSpotVmsOperations(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsSpotWorkersOperations", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var v string

		httpRes, err := apiClient.ProjectsApi.ProjectsSpotWorkersOperations(context.Background(), v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectsApiService ProjectsUpgrade", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var v string

		httpRes, err := apiClient.ProjectsApi.ProjectsUpgrade(context.Background(), projectId, v).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
