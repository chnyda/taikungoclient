/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@itera.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the ConfirmEmailCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConfirmEmailCommand{}

// ConfirmEmailCommand struct for ConfirmEmailCommand
type ConfirmEmailCommand struct {
	NewEmail NullableString `json:"newEmail,omitempty"`
	Mode NullableString `json:"mode,omitempty"`
}

// NewConfirmEmailCommand instantiates a new ConfirmEmailCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfirmEmailCommand() *ConfirmEmailCommand {
	this := ConfirmEmailCommand{}
	return &this
}

// NewConfirmEmailCommandWithDefaults instantiates a new ConfirmEmailCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfirmEmailCommandWithDefaults() *ConfirmEmailCommand {
	this := ConfirmEmailCommand{}
	return &this
}

// GetNewEmail returns the NewEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfirmEmailCommand) GetNewEmail() string {
	if o == nil || IsNil(o.NewEmail.Get()) {
		var ret string
		return ret
	}
	return *o.NewEmail.Get()
}

// GetNewEmailOk returns a tuple with the NewEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfirmEmailCommand) GetNewEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewEmail.Get(), o.NewEmail.IsSet()
}

// HasNewEmail returns a boolean if a field has been set.
func (o *ConfirmEmailCommand) HasNewEmail() bool {
	if o != nil && o.NewEmail.IsSet() {
		return true
	}

	return false
}

// SetNewEmail gets a reference to the given NullableString and assigns it to the NewEmail field.
func (o *ConfirmEmailCommand) SetNewEmail(v string) {
	o.NewEmail.Set(&v)
}
// SetNewEmailNil sets the value for NewEmail to be an explicit nil
func (o *ConfirmEmailCommand) SetNewEmailNil() {
	o.NewEmail.Set(nil)
}

// UnsetNewEmail ensures that no value is present for NewEmail, not even an explicit nil
func (o *ConfirmEmailCommand) UnsetNewEmail() {
	o.NewEmail.Unset()
}

// GetMode returns the Mode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfirmEmailCommand) GetMode() string {
	if o == nil || IsNil(o.Mode.Get()) {
		var ret string
		return ret
	}
	return *o.Mode.Get()
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfirmEmailCommand) GetModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mode.Get(), o.Mode.IsSet()
}

// HasMode returns a boolean if a field has been set.
func (o *ConfirmEmailCommand) HasMode() bool {
	if o != nil && o.Mode.IsSet() {
		return true
	}

	return false
}

// SetMode gets a reference to the given NullableString and assigns it to the Mode field.
func (o *ConfirmEmailCommand) SetMode(v string) {
	o.Mode.Set(&v)
}
// SetModeNil sets the value for Mode to be an explicit nil
func (o *ConfirmEmailCommand) SetModeNil() {
	o.Mode.Set(nil)
}

// UnsetMode ensures that no value is present for Mode, not even an explicit nil
func (o *ConfirmEmailCommand) UnsetMode() {
	o.Mode.Unset()
}

func (o ConfirmEmailCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConfirmEmailCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NewEmail.IsSet() {
		toSerialize["newEmail"] = o.NewEmail.Get()
	}
	if o.Mode.IsSet() {
		toSerialize["mode"] = o.Mode.Get()
	}
	return toSerialize, nil
}

type NullableConfirmEmailCommand struct {
	value *ConfirmEmailCommand
	isSet bool
}

func (v NullableConfirmEmailCommand) Get() *ConfirmEmailCommand {
	return v.value
}

func (v *NullableConfirmEmailCommand) Set(val *ConfirmEmailCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableConfirmEmailCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableConfirmEmailCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfirmEmailCommand(val *ConfirmEmailCommand) *NullableConfirmEmailCommand {
	return &NullableConfirmEmailCommand{value: val, isSet: true}
}

func (v NullableConfirmEmailCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfirmEmailCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


