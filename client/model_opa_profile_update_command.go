/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@itera.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the OpaProfileUpdateCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpaProfileUpdateCommand{}

// OpaProfileUpdateCommand struct for OpaProfileUpdateCommand
type OpaProfileUpdateCommand struct {
	Id int32 `json:"id"`
	Name string `json:"name"`
	ForbidNodePort *bool `json:"forbidNodePort,omitempty"`
	ForbidHttpIngress *bool `json:"forbidHttpIngress,omitempty"`
	RequireProbe *bool `json:"requireProbe,omitempty"`
	UniqueIngresses *bool `json:"uniqueIngresses,omitempty"`
	UniqueServiceSelector *bool `json:"uniqueServiceSelector,omitempty"`
	AllowedRepo []string `json:"allowedRepo,omitempty"`
	ForbidSpecificTags []string `json:"forbidSpecificTags,omitempty"`
	IngressWhitelist []string `json:"ingressWhitelist,omitempty"`
}

// NewOpaProfileUpdateCommand instantiates a new OpaProfileUpdateCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpaProfileUpdateCommand(id int32, name string) *OpaProfileUpdateCommand {
	this := OpaProfileUpdateCommand{}
	this.Id = id
	this.Name = name
	return &this
}

// NewOpaProfileUpdateCommandWithDefaults instantiates a new OpaProfileUpdateCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpaProfileUpdateCommandWithDefaults() *OpaProfileUpdateCommand {
	this := OpaProfileUpdateCommand{}
	return &this
}

// GetId returns the Id field value
func (o *OpaProfileUpdateCommand) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OpaProfileUpdateCommand) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OpaProfileUpdateCommand) SetId(v int32) {
	o.Id = v
}

// GetName returns the Name field value
func (o *OpaProfileUpdateCommand) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OpaProfileUpdateCommand) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OpaProfileUpdateCommand) SetName(v string) {
	o.Name = v
}

// GetForbidNodePort returns the ForbidNodePort field value if set, zero value otherwise.
func (o *OpaProfileUpdateCommand) GetForbidNodePort() bool {
	if o == nil || IsNil(o.ForbidNodePort) {
		var ret bool
		return ret
	}
	return *o.ForbidNodePort
}

// GetForbidNodePortOk returns a tuple with the ForbidNodePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpaProfileUpdateCommand) GetForbidNodePortOk() (*bool, bool) {
	if o == nil || IsNil(o.ForbidNodePort) {
		return nil, false
	}
	return o.ForbidNodePort, true
}

// HasForbidNodePort returns a boolean if a field has been set.
func (o *OpaProfileUpdateCommand) HasForbidNodePort() bool {
	if o != nil && !IsNil(o.ForbidNodePort) {
		return true
	}

	return false
}

// SetForbidNodePort gets a reference to the given bool and assigns it to the ForbidNodePort field.
func (o *OpaProfileUpdateCommand) SetForbidNodePort(v bool) {
	o.ForbidNodePort = &v
}

// GetForbidHttpIngress returns the ForbidHttpIngress field value if set, zero value otherwise.
func (o *OpaProfileUpdateCommand) GetForbidHttpIngress() bool {
	if o == nil || IsNil(o.ForbidHttpIngress) {
		var ret bool
		return ret
	}
	return *o.ForbidHttpIngress
}

// GetForbidHttpIngressOk returns a tuple with the ForbidHttpIngress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpaProfileUpdateCommand) GetForbidHttpIngressOk() (*bool, bool) {
	if o == nil || IsNil(o.ForbidHttpIngress) {
		return nil, false
	}
	return o.ForbidHttpIngress, true
}

// HasForbidHttpIngress returns a boolean if a field has been set.
func (o *OpaProfileUpdateCommand) HasForbidHttpIngress() bool {
	if o != nil && !IsNil(o.ForbidHttpIngress) {
		return true
	}

	return false
}

// SetForbidHttpIngress gets a reference to the given bool and assigns it to the ForbidHttpIngress field.
func (o *OpaProfileUpdateCommand) SetForbidHttpIngress(v bool) {
	o.ForbidHttpIngress = &v
}

// GetRequireProbe returns the RequireProbe field value if set, zero value otherwise.
func (o *OpaProfileUpdateCommand) GetRequireProbe() bool {
	if o == nil || IsNil(o.RequireProbe) {
		var ret bool
		return ret
	}
	return *o.RequireProbe
}

// GetRequireProbeOk returns a tuple with the RequireProbe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpaProfileUpdateCommand) GetRequireProbeOk() (*bool, bool) {
	if o == nil || IsNil(o.RequireProbe) {
		return nil, false
	}
	return o.RequireProbe, true
}

// HasRequireProbe returns a boolean if a field has been set.
func (o *OpaProfileUpdateCommand) HasRequireProbe() bool {
	if o != nil && !IsNil(o.RequireProbe) {
		return true
	}

	return false
}

// SetRequireProbe gets a reference to the given bool and assigns it to the RequireProbe field.
func (o *OpaProfileUpdateCommand) SetRequireProbe(v bool) {
	o.RequireProbe = &v
}

// GetUniqueIngresses returns the UniqueIngresses field value if set, zero value otherwise.
func (o *OpaProfileUpdateCommand) GetUniqueIngresses() bool {
	if o == nil || IsNil(o.UniqueIngresses) {
		var ret bool
		return ret
	}
	return *o.UniqueIngresses
}

// GetUniqueIngressesOk returns a tuple with the UniqueIngresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpaProfileUpdateCommand) GetUniqueIngressesOk() (*bool, bool) {
	if o == nil || IsNil(o.UniqueIngresses) {
		return nil, false
	}
	return o.UniqueIngresses, true
}

// HasUniqueIngresses returns a boolean if a field has been set.
func (o *OpaProfileUpdateCommand) HasUniqueIngresses() bool {
	if o != nil && !IsNil(o.UniqueIngresses) {
		return true
	}

	return false
}

// SetUniqueIngresses gets a reference to the given bool and assigns it to the UniqueIngresses field.
func (o *OpaProfileUpdateCommand) SetUniqueIngresses(v bool) {
	o.UniqueIngresses = &v
}

// GetUniqueServiceSelector returns the UniqueServiceSelector field value if set, zero value otherwise.
func (o *OpaProfileUpdateCommand) GetUniqueServiceSelector() bool {
	if o == nil || IsNil(o.UniqueServiceSelector) {
		var ret bool
		return ret
	}
	return *o.UniqueServiceSelector
}

// GetUniqueServiceSelectorOk returns a tuple with the UniqueServiceSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpaProfileUpdateCommand) GetUniqueServiceSelectorOk() (*bool, bool) {
	if o == nil || IsNil(o.UniqueServiceSelector) {
		return nil, false
	}
	return o.UniqueServiceSelector, true
}

// HasUniqueServiceSelector returns a boolean if a field has been set.
func (o *OpaProfileUpdateCommand) HasUniqueServiceSelector() bool {
	if o != nil && !IsNil(o.UniqueServiceSelector) {
		return true
	}

	return false
}

// SetUniqueServiceSelector gets a reference to the given bool and assigns it to the UniqueServiceSelector field.
func (o *OpaProfileUpdateCommand) SetUniqueServiceSelector(v bool) {
	o.UniqueServiceSelector = &v
}

// GetAllowedRepo returns the AllowedRepo field value if set, zero value otherwise.
func (o *OpaProfileUpdateCommand) GetAllowedRepo() []string {
	if o == nil || IsNil(o.AllowedRepo) {
		var ret []string
		return ret
	}
	return o.AllowedRepo
}

// GetAllowedRepoOk returns a tuple with the AllowedRepo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpaProfileUpdateCommand) GetAllowedRepoOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedRepo) {
		return nil, false
	}
	return o.AllowedRepo, true
}

// HasAllowedRepo returns a boolean if a field has been set.
func (o *OpaProfileUpdateCommand) HasAllowedRepo() bool {
	if o != nil && !IsNil(o.AllowedRepo) {
		return true
	}

	return false
}

// SetAllowedRepo gets a reference to the given []string and assigns it to the AllowedRepo field.
func (o *OpaProfileUpdateCommand) SetAllowedRepo(v []string) {
	o.AllowedRepo = v
}

// GetForbidSpecificTags returns the ForbidSpecificTags field value if set, zero value otherwise.
func (o *OpaProfileUpdateCommand) GetForbidSpecificTags() []string {
	if o == nil || IsNil(o.ForbidSpecificTags) {
		var ret []string
		return ret
	}
	return o.ForbidSpecificTags
}

// GetForbidSpecificTagsOk returns a tuple with the ForbidSpecificTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpaProfileUpdateCommand) GetForbidSpecificTagsOk() ([]string, bool) {
	if o == nil || IsNil(o.ForbidSpecificTags) {
		return nil, false
	}
	return o.ForbidSpecificTags, true
}

// HasForbidSpecificTags returns a boolean if a field has been set.
func (o *OpaProfileUpdateCommand) HasForbidSpecificTags() bool {
	if o != nil && !IsNil(o.ForbidSpecificTags) {
		return true
	}

	return false
}

// SetForbidSpecificTags gets a reference to the given []string and assigns it to the ForbidSpecificTags field.
func (o *OpaProfileUpdateCommand) SetForbidSpecificTags(v []string) {
	o.ForbidSpecificTags = v
}

// GetIngressWhitelist returns the IngressWhitelist field value if set, zero value otherwise.
func (o *OpaProfileUpdateCommand) GetIngressWhitelist() []string {
	if o == nil || IsNil(o.IngressWhitelist) {
		var ret []string
		return ret
	}
	return o.IngressWhitelist
}

// GetIngressWhitelistOk returns a tuple with the IngressWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpaProfileUpdateCommand) GetIngressWhitelistOk() ([]string, bool) {
	if o == nil || IsNil(o.IngressWhitelist) {
		return nil, false
	}
	return o.IngressWhitelist, true
}

// HasIngressWhitelist returns a boolean if a field has been set.
func (o *OpaProfileUpdateCommand) HasIngressWhitelist() bool {
	if o != nil && !IsNil(o.IngressWhitelist) {
		return true
	}

	return false
}

// SetIngressWhitelist gets a reference to the given []string and assigns it to the IngressWhitelist field.
func (o *OpaProfileUpdateCommand) SetIngressWhitelist(v []string) {
	o.IngressWhitelist = v
}

func (o OpaProfileUpdateCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpaProfileUpdateCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.ForbidNodePort) {
		toSerialize["forbidNodePort"] = o.ForbidNodePort
	}
	if !IsNil(o.ForbidHttpIngress) {
		toSerialize["forbidHttpIngress"] = o.ForbidHttpIngress
	}
	if !IsNil(o.RequireProbe) {
		toSerialize["requireProbe"] = o.RequireProbe
	}
	if !IsNil(o.UniqueIngresses) {
		toSerialize["uniqueIngresses"] = o.UniqueIngresses
	}
	if !IsNil(o.UniqueServiceSelector) {
		toSerialize["uniqueServiceSelector"] = o.UniqueServiceSelector
	}
	if !IsNil(o.AllowedRepo) {
		toSerialize["allowedRepo"] = o.AllowedRepo
	}
	if !IsNil(o.ForbidSpecificTags) {
		toSerialize["forbidSpecificTags"] = o.ForbidSpecificTags
	}
	if !IsNil(o.IngressWhitelist) {
		toSerialize["ingressWhitelist"] = o.IngressWhitelist
	}
	return toSerialize, nil
}

type NullableOpaProfileUpdateCommand struct {
	value *OpaProfileUpdateCommand
	isSet bool
}

func (v NullableOpaProfileUpdateCommand) Get() *OpaProfileUpdateCommand {
	return v.value
}

func (v *NullableOpaProfileUpdateCommand) Set(val *OpaProfileUpdateCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableOpaProfileUpdateCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableOpaProfileUpdateCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpaProfileUpdateCommand(val *OpaProfileUpdateCommand) *NullableOpaProfileUpdateCommand {
	return &NullableOpaProfileUpdateCommand{value: val, isSet: true}
}

func (v NullableOpaProfileUpdateCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpaProfileUpdateCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


