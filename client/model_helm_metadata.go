/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@itera.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the HelmMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmMetadata{}

// HelmMetadata struct for HelmMetadata
type HelmMetadata struct {
	Name *string `json:"name,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	CreationTimestamp *string `json:"creationTimestamp,omitempty"`
}

// NewHelmMetadata instantiates a new HelmMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmMetadata() *HelmMetadata {
	this := HelmMetadata{}
	return &this
}

// NewHelmMetadataWithDefaults instantiates a new HelmMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmMetadataWithDefaults() *HelmMetadata {
	this := HelmMetadata{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *HelmMetadata) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmMetadata) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *HelmMetadata) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *HelmMetadata) SetName(v string) {
	o.Name = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *HelmMetadata) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmMetadata) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *HelmMetadata) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *HelmMetadata) SetNamespace(v string) {
	o.Namespace = &v
}

// GetCreationTimestamp returns the CreationTimestamp field value if set, zero value otherwise.
func (o *HelmMetadata) GetCreationTimestamp() string {
	if o == nil || IsNil(o.CreationTimestamp) {
		var ret string
		return ret
	}
	return *o.CreationTimestamp
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmMetadata) GetCreationTimestampOk() (*string, bool) {
	if o == nil || IsNil(o.CreationTimestamp) {
		return nil, false
	}
	return o.CreationTimestamp, true
}

// HasCreationTimestamp returns a boolean if a field has been set.
func (o *HelmMetadata) HasCreationTimestamp() bool {
	if o != nil && !IsNil(o.CreationTimestamp) {
		return true
	}

	return false
}

// SetCreationTimestamp gets a reference to the given string and assigns it to the CreationTimestamp field.
func (o *HelmMetadata) SetCreationTimestamp(v string) {
	o.CreationTimestamp = &v
}

func (o HelmMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.CreationTimestamp) {
		toSerialize["creationTimestamp"] = o.CreationTimestamp
	}
	return toSerialize, nil
}

type NullableHelmMetadata struct {
	value *HelmMetadata
	isSet bool
}

func (v NullableHelmMetadata) Get() *HelmMetadata {
	return v.value
}

func (v *NullableHelmMetadata) Set(val *HelmMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmMetadata(val *HelmMetadata) *NullableHelmMetadata {
	return &NullableHelmMetadata{value: val, isSet: true}
}

func (v NullableHelmMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


