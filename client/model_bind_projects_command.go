/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@itera.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the BindProjectsCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BindProjectsCommand{}

// BindProjectsCommand struct for BindProjectsCommand
type BindProjectsCommand struct {
	Projects []UpdateUserProjectDto `json:"projects,omitempty"`
	UserId *string `json:"userId,omitempty"`
	UserName *string `json:"userName,omitempty"`
}

// NewBindProjectsCommand instantiates a new BindProjectsCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBindProjectsCommand() *BindProjectsCommand {
	this := BindProjectsCommand{}
	return &this
}

// NewBindProjectsCommandWithDefaults instantiates a new BindProjectsCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBindProjectsCommandWithDefaults() *BindProjectsCommand {
	this := BindProjectsCommand{}
	return &this
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *BindProjectsCommand) GetProjects() []UpdateUserProjectDto {
	if o == nil || IsNil(o.Projects) {
		var ret []UpdateUserProjectDto
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BindProjectsCommand) GetProjectsOk() ([]UpdateUserProjectDto, bool) {
	if o == nil || IsNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *BindProjectsCommand) HasProjects() bool {
	if o != nil && !IsNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []UpdateUserProjectDto and assigns it to the Projects field.
func (o *BindProjectsCommand) SetProjects(v []UpdateUserProjectDto) {
	o.Projects = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *BindProjectsCommand) GetUserId() string {
	if o == nil || IsNil(o.UserId) {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BindProjectsCommand) GetUserIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserId) {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *BindProjectsCommand) HasUserId() bool {
	if o != nil && !IsNil(o.UserId) {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *BindProjectsCommand) SetUserId(v string) {
	o.UserId = &v
}

// GetUserName returns the UserName field value if set, zero value otherwise.
func (o *BindProjectsCommand) GetUserName() string {
	if o == nil || IsNil(o.UserName) {
		var ret string
		return ret
	}
	return *o.UserName
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BindProjectsCommand) GetUserNameOk() (*string, bool) {
	if o == nil || IsNil(o.UserName) {
		return nil, false
	}
	return o.UserName, true
}

// HasUserName returns a boolean if a field has been set.
func (o *BindProjectsCommand) HasUserName() bool {
	if o != nil && !IsNil(o.UserName) {
		return true
	}

	return false
}

// SetUserName gets a reference to the given string and assigns it to the UserName field.
func (o *BindProjectsCommand) SetUserName(v string) {
	o.UserName = &v
}

func (o BindProjectsCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BindProjectsCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}
	if !IsNil(o.UserId) {
		toSerialize["userId"] = o.UserId
	}
	if !IsNil(o.UserName) {
		toSerialize["userName"] = o.UserName
	}
	return toSerialize, nil
}

type NullableBindProjectsCommand struct {
	value *BindProjectsCommand
	isSet bool
}

func (v NullableBindProjectsCommand) Get() *BindProjectsCommand {
	return v.value
}

func (v *NullableBindProjectsCommand) Set(val *BindProjectsCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableBindProjectsCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableBindProjectsCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBindProjectsCommand(val *BindProjectsCommand) *NullableBindProjectsCommand {
	return &NullableBindProjectsCommand{value: val, isSet: true}
}

func (v NullableBindProjectsCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBindProjectsCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


