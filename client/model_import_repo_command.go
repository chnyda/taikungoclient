/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@itera.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the ImportRepoCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportRepoCommand{}

// ImportRepoCommand struct for ImportRepoCommand
type ImportRepoCommand struct {
	Name string `json:"name"`
	Url *string `json:"url,omitempty"`
	DisplayName string `json:"displayName"`
}

// NewImportRepoCommand instantiates a new ImportRepoCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportRepoCommand(name string, displayName string) *ImportRepoCommand {
	this := ImportRepoCommand{}
	this.Name = name
	this.DisplayName = displayName
	return &this
}

// NewImportRepoCommandWithDefaults instantiates a new ImportRepoCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportRepoCommandWithDefaults() *ImportRepoCommand {
	this := ImportRepoCommand{}
	return &this
}

// GetName returns the Name field value
func (o *ImportRepoCommand) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ImportRepoCommand) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ImportRepoCommand) SetName(v string) {
	o.Name = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ImportRepoCommand) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportRepoCommand) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ImportRepoCommand) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ImportRepoCommand) SetUrl(v string) {
	o.Url = &v
}

// GetDisplayName returns the DisplayName field value
func (o *ImportRepoCommand) GetDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value
// and a boolean to check if the value has been set.
func (o *ImportRepoCommand) GetDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DisplayName, true
}

// SetDisplayName sets field value
func (o *ImportRepoCommand) SetDisplayName(v string) {
	o.DisplayName = v
}

func (o ImportRepoCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportRepoCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	toSerialize["displayName"] = o.DisplayName
	return toSerialize, nil
}

type NullableImportRepoCommand struct {
	value *ImportRepoCommand
	isSet bool
}

func (v NullableImportRepoCommand) Get() *ImportRepoCommand {
	return v.value
}

func (v *NullableImportRepoCommand) Set(val *ImportRepoCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableImportRepoCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableImportRepoCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportRepoCommand(val *ImportRepoCommand) *NullableImportRepoCommand {
	return &NullableImportRepoCommand{value: val, isSet: true}
}

func (v NullableImportRepoCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportRepoCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


