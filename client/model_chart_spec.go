/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@itera.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the ChartSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChartSpec{}

// ChartSpec struct for ChartSpec
type ChartSpec struct {
	Chart *string `json:"chart,omitempty"`
	Version *string `json:"version,omitempty"`
	SourceRef *SourceRef `json:"sourceRef,omitempty"`
	Interval *string `json:"interval,omitempty"`
}

// NewChartSpec instantiates a new ChartSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChartSpec() *ChartSpec {
	this := ChartSpec{}
	return &this
}

// NewChartSpecWithDefaults instantiates a new ChartSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChartSpecWithDefaults() *ChartSpec {
	this := ChartSpec{}
	return &this
}

// GetChart returns the Chart field value if set, zero value otherwise.
func (o *ChartSpec) GetChart() string {
	if o == nil || IsNil(o.Chart) {
		var ret string
		return ret
	}
	return *o.Chart
}

// GetChartOk returns a tuple with the Chart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartSpec) GetChartOk() (*string, bool) {
	if o == nil || IsNil(o.Chart) {
		return nil, false
	}
	return o.Chart, true
}

// HasChart returns a boolean if a field has been set.
func (o *ChartSpec) HasChart() bool {
	if o != nil && !IsNil(o.Chart) {
		return true
	}

	return false
}

// SetChart gets a reference to the given string and assigns it to the Chart field.
func (o *ChartSpec) SetChart(v string) {
	o.Chart = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *ChartSpec) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartSpec) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *ChartSpec) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *ChartSpec) SetVersion(v string) {
	o.Version = &v
}

// GetSourceRef returns the SourceRef field value if set, zero value otherwise.
func (o *ChartSpec) GetSourceRef() SourceRef {
	if o == nil || IsNil(o.SourceRef) {
		var ret SourceRef
		return ret
	}
	return *o.SourceRef
}

// GetSourceRefOk returns a tuple with the SourceRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartSpec) GetSourceRefOk() (*SourceRef, bool) {
	if o == nil || IsNil(o.SourceRef) {
		return nil, false
	}
	return o.SourceRef, true
}

// HasSourceRef returns a boolean if a field has been set.
func (o *ChartSpec) HasSourceRef() bool {
	if o != nil && !IsNil(o.SourceRef) {
		return true
	}

	return false
}

// SetSourceRef gets a reference to the given SourceRef and assigns it to the SourceRef field.
func (o *ChartSpec) SetSourceRef(v SourceRef) {
	o.SourceRef = &v
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *ChartSpec) GetInterval() string {
	if o == nil || IsNil(o.Interval) {
		var ret string
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChartSpec) GetIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *ChartSpec) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given string and assigns it to the Interval field.
func (o *ChartSpec) SetInterval(v string) {
	o.Interval = &v
}

func (o ChartSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChartSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Chart) {
		toSerialize["chart"] = o.Chart
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.SourceRef) {
		toSerialize["sourceRef"] = o.SourceRef
	}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	return toSerialize, nil
}

type NullableChartSpec struct {
	value *ChartSpec
	isSet bool
}

func (v NullableChartSpec) Get() *ChartSpec {
	return v.value
}

func (v *NullableChartSpec) Set(val *ChartSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableChartSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableChartSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChartSpec(val *ChartSpec) *NullableChartSpec {
	return &NullableChartSpec{value: val, isSet: true}
}

func (v NullableChartSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChartSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


