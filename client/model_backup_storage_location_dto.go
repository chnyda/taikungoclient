/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@itera.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"time"
)

// checks if the BackupStorageLocationDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupStorageLocationDto{}

// BackupStorageLocationDto struct for BackupStorageLocationDto
type BackupStorageLocationDto struct {
	MetadataName *string `json:"metadataName,omitempty"`
	Provider *string `json:"provider,omitempty"`
	Namespace *string `json:"namespace,omitempty"`
	LastValidated *time.Time `json:"lastValidated,omitempty"`
	CreatedAt *time.Time `json:"createdAt,omitempty"`
	AccessMode *string `json:"accessMode,omitempty"`
	Phase *string `json:"phase,omitempty"`
	BackupCredentialId *int32 `json:"backupCredentialId,omitempty"`
}

// NewBackupStorageLocationDto instantiates a new BackupStorageLocationDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupStorageLocationDto() *BackupStorageLocationDto {
	this := BackupStorageLocationDto{}
	return &this
}

// NewBackupStorageLocationDtoWithDefaults instantiates a new BackupStorageLocationDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupStorageLocationDtoWithDefaults() *BackupStorageLocationDto {
	this := BackupStorageLocationDto{}
	return &this
}

// GetMetadataName returns the MetadataName field value if set, zero value otherwise.
func (o *BackupStorageLocationDto) GetMetadataName() string {
	if o == nil || IsNil(o.MetadataName) {
		var ret string
		return ret
	}
	return *o.MetadataName
}

// GetMetadataNameOk returns a tuple with the MetadataName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStorageLocationDto) GetMetadataNameOk() (*string, bool) {
	if o == nil || IsNil(o.MetadataName) {
		return nil, false
	}
	return o.MetadataName, true
}

// HasMetadataName returns a boolean if a field has been set.
func (o *BackupStorageLocationDto) HasMetadataName() bool {
	if o != nil && !IsNil(o.MetadataName) {
		return true
	}

	return false
}

// SetMetadataName gets a reference to the given string and assigns it to the MetadataName field.
func (o *BackupStorageLocationDto) SetMetadataName(v string) {
	o.MetadataName = &v
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *BackupStorageLocationDto) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStorageLocationDto) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *BackupStorageLocationDto) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *BackupStorageLocationDto) SetProvider(v string) {
	o.Provider = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *BackupStorageLocationDto) GetNamespace() string {
	if o == nil || IsNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStorageLocationDto) GetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *BackupStorageLocationDto) HasNamespace() bool {
	if o != nil && !IsNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *BackupStorageLocationDto) SetNamespace(v string) {
	o.Namespace = &v
}

// GetLastValidated returns the LastValidated field value if set, zero value otherwise.
func (o *BackupStorageLocationDto) GetLastValidated() time.Time {
	if o == nil || IsNil(o.LastValidated) {
		var ret time.Time
		return ret
	}
	return *o.LastValidated
}

// GetLastValidatedOk returns a tuple with the LastValidated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStorageLocationDto) GetLastValidatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.LastValidated) {
		return nil, false
	}
	return o.LastValidated, true
}

// HasLastValidated returns a boolean if a field has been set.
func (o *BackupStorageLocationDto) HasLastValidated() bool {
	if o != nil && !IsNil(o.LastValidated) {
		return true
	}

	return false
}

// SetLastValidated gets a reference to the given time.Time and assigns it to the LastValidated field.
func (o *BackupStorageLocationDto) SetLastValidated(v time.Time) {
	o.LastValidated = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *BackupStorageLocationDto) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStorageLocationDto) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *BackupStorageLocationDto) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *BackupStorageLocationDto) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetAccessMode returns the AccessMode field value if set, zero value otherwise.
func (o *BackupStorageLocationDto) GetAccessMode() string {
	if o == nil || IsNil(o.AccessMode) {
		var ret string
		return ret
	}
	return *o.AccessMode
}

// GetAccessModeOk returns a tuple with the AccessMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStorageLocationDto) GetAccessModeOk() (*string, bool) {
	if o == nil || IsNil(o.AccessMode) {
		return nil, false
	}
	return o.AccessMode, true
}

// HasAccessMode returns a boolean if a field has been set.
func (o *BackupStorageLocationDto) HasAccessMode() bool {
	if o != nil && !IsNil(o.AccessMode) {
		return true
	}

	return false
}

// SetAccessMode gets a reference to the given string and assigns it to the AccessMode field.
func (o *BackupStorageLocationDto) SetAccessMode(v string) {
	o.AccessMode = &v
}

// GetPhase returns the Phase field value if set, zero value otherwise.
func (o *BackupStorageLocationDto) GetPhase() string {
	if o == nil || IsNil(o.Phase) {
		var ret string
		return ret
	}
	return *o.Phase
}

// GetPhaseOk returns a tuple with the Phase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStorageLocationDto) GetPhaseOk() (*string, bool) {
	if o == nil || IsNil(o.Phase) {
		return nil, false
	}
	return o.Phase, true
}

// HasPhase returns a boolean if a field has been set.
func (o *BackupStorageLocationDto) HasPhase() bool {
	if o != nil && !IsNil(o.Phase) {
		return true
	}

	return false
}

// SetPhase gets a reference to the given string and assigns it to the Phase field.
func (o *BackupStorageLocationDto) SetPhase(v string) {
	o.Phase = &v
}

// GetBackupCredentialId returns the BackupCredentialId field value if set, zero value otherwise.
func (o *BackupStorageLocationDto) GetBackupCredentialId() int32 {
	if o == nil || IsNil(o.BackupCredentialId) {
		var ret int32
		return ret
	}
	return *o.BackupCredentialId
}

// GetBackupCredentialIdOk returns a tuple with the BackupCredentialId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupStorageLocationDto) GetBackupCredentialIdOk() (*int32, bool) {
	if o == nil || IsNil(o.BackupCredentialId) {
		return nil, false
	}
	return o.BackupCredentialId, true
}

// HasBackupCredentialId returns a boolean if a field has been set.
func (o *BackupStorageLocationDto) HasBackupCredentialId() bool {
	if o != nil && !IsNil(o.BackupCredentialId) {
		return true
	}

	return false
}

// SetBackupCredentialId gets a reference to the given int32 and assigns it to the BackupCredentialId field.
func (o *BackupStorageLocationDto) SetBackupCredentialId(v int32) {
	o.BackupCredentialId = &v
}

func (o BackupStorageLocationDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupStorageLocationDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MetadataName) {
		toSerialize["metadataName"] = o.MetadataName
	}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !IsNil(o.LastValidated) {
		toSerialize["lastValidated"] = o.LastValidated
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["createdAt"] = o.CreatedAt
	}
	if !IsNil(o.AccessMode) {
		toSerialize["accessMode"] = o.AccessMode
	}
	if !IsNil(o.Phase) {
		toSerialize["phase"] = o.Phase
	}
	if !IsNil(o.BackupCredentialId) {
		toSerialize["backupCredentialId"] = o.BackupCredentialId
	}
	return toSerialize, nil
}

type NullableBackupStorageLocationDto struct {
	value *BackupStorageLocationDto
	isSet bool
}

func (v NullableBackupStorageLocationDto) Get() *BackupStorageLocationDto {
	return v.value
}

func (v *NullableBackupStorageLocationDto) Set(val *BackupStorageLocationDto) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupStorageLocationDto) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupStorageLocationDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupStorageLocationDto(val *BackupStorageLocationDto) *NullableBackupStorageLocationDto {
	return &NullableBackupStorageLocationDto{value: val, isSet: true}
}

func (v NullableBackupStorageLocationDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupStorageLocationDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


