/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@itera.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the UpdateHypervisorsCommand type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateHypervisorsCommand{}

// UpdateHypervisorsCommand struct for UpdateHypervisorsCommand
type UpdateHypervisorsCommand struct {
	Id int32 `json:"id"`
	Hypervisors []string `json:"hypervisors,omitempty"`
}

// NewUpdateHypervisorsCommand instantiates a new UpdateHypervisorsCommand object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateHypervisorsCommand(id int32) *UpdateHypervisorsCommand {
	this := UpdateHypervisorsCommand{}
	this.Id = id
	return &this
}

// NewUpdateHypervisorsCommandWithDefaults instantiates a new UpdateHypervisorsCommand object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateHypervisorsCommandWithDefaults() *UpdateHypervisorsCommand {
	this := UpdateHypervisorsCommand{}
	return &this
}

// GetId returns the Id field value
func (o *UpdateHypervisorsCommand) GetId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpdateHypervisorsCommand) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpdateHypervisorsCommand) SetId(v int32) {
	o.Id = v
}

// GetHypervisors returns the Hypervisors field value if set, zero value otherwise.
func (o *UpdateHypervisorsCommand) GetHypervisors() []string {
	if o == nil || IsNil(o.Hypervisors) {
		var ret []string
		return ret
	}
	return o.Hypervisors
}

// GetHypervisorsOk returns a tuple with the Hypervisors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateHypervisorsCommand) GetHypervisorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Hypervisors) {
		return nil, false
	}
	return o.Hypervisors, true
}

// HasHypervisors returns a boolean if a field has been set.
func (o *UpdateHypervisorsCommand) HasHypervisors() bool {
	if o != nil && !IsNil(o.Hypervisors) {
		return true
	}

	return false
}

// SetHypervisors gets a reference to the given []string and assigns it to the Hypervisors field.
func (o *UpdateHypervisorsCommand) SetHypervisors(v []string) {
	o.Hypervisors = v
}

func (o UpdateHypervisorsCommand) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateHypervisorsCommand) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Hypervisors) {
		toSerialize["hypervisors"] = o.Hypervisors
	}
	return toSerialize, nil
}

type NullableUpdateHypervisorsCommand struct {
	value *UpdateHypervisorsCommand
	isSet bool
}

func (v NullableUpdateHypervisorsCommand) Get() *UpdateHypervisorsCommand {
	return v.value
}

func (v *NullableUpdateHypervisorsCommand) Set(val *UpdateHypervisorsCommand) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateHypervisorsCommand) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateHypervisorsCommand) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateHypervisorsCommand(val *UpdateHypervisorsCommand) *NullableUpdateHypervisorsCommand {
	return &NullableUpdateHypervisorsCommand{value: val, isSet: true}
}

func (v NullableUpdateHypervisorsCommand) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateHypervisorsCommand) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


