/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@itera.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the HelmSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmSpec{}

// HelmSpec struct for HelmSpec
type HelmSpec struct {
	Interval *string `json:"interval,omitempty"`
	ReleaseName *string `json:"releaseName,omitempty"`
	Url *string `json:"url,omitempty"`
	TargetNamespace *string `json:"targetNamespace,omitempty"`
	StorageNamespace *string `json:"storageNamespace,omitempty"`
	Chart *Chart `json:"chart,omitempty"`
	Values *JsonNode `json:"values,omitempty"`
}

// NewHelmSpec instantiates a new HelmSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmSpec() *HelmSpec {
	this := HelmSpec{}
	return &this
}

// NewHelmSpecWithDefaults instantiates a new HelmSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmSpecWithDefaults() *HelmSpec {
	this := HelmSpec{}
	return &this
}

// GetInterval returns the Interval field value if set, zero value otherwise.
func (o *HelmSpec) GetInterval() string {
	if o == nil || IsNil(o.Interval) {
		var ret string
		return ret
	}
	return *o.Interval
}

// GetIntervalOk returns a tuple with the Interval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmSpec) GetIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.Interval) {
		return nil, false
	}
	return o.Interval, true
}

// HasInterval returns a boolean if a field has been set.
func (o *HelmSpec) HasInterval() bool {
	if o != nil && !IsNil(o.Interval) {
		return true
	}

	return false
}

// SetInterval gets a reference to the given string and assigns it to the Interval field.
func (o *HelmSpec) SetInterval(v string) {
	o.Interval = &v
}

// GetReleaseName returns the ReleaseName field value if set, zero value otherwise.
func (o *HelmSpec) GetReleaseName() string {
	if o == nil || IsNil(o.ReleaseName) {
		var ret string
		return ret
	}
	return *o.ReleaseName
}

// GetReleaseNameOk returns a tuple with the ReleaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmSpec) GetReleaseNameOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseName) {
		return nil, false
	}
	return o.ReleaseName, true
}

// HasReleaseName returns a boolean if a field has been set.
func (o *HelmSpec) HasReleaseName() bool {
	if o != nil && !IsNil(o.ReleaseName) {
		return true
	}

	return false
}

// SetReleaseName gets a reference to the given string and assigns it to the ReleaseName field.
func (o *HelmSpec) SetReleaseName(v string) {
	o.ReleaseName = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *HelmSpec) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmSpec) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *HelmSpec) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *HelmSpec) SetUrl(v string) {
	o.Url = &v
}

// GetTargetNamespace returns the TargetNamespace field value if set, zero value otherwise.
func (o *HelmSpec) GetTargetNamespace() string {
	if o == nil || IsNil(o.TargetNamespace) {
		var ret string
		return ret
	}
	return *o.TargetNamespace
}

// GetTargetNamespaceOk returns a tuple with the TargetNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmSpec) GetTargetNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.TargetNamespace) {
		return nil, false
	}
	return o.TargetNamespace, true
}

// HasTargetNamespace returns a boolean if a field has been set.
func (o *HelmSpec) HasTargetNamespace() bool {
	if o != nil && !IsNil(o.TargetNamespace) {
		return true
	}

	return false
}

// SetTargetNamespace gets a reference to the given string and assigns it to the TargetNamespace field.
func (o *HelmSpec) SetTargetNamespace(v string) {
	o.TargetNamespace = &v
}

// GetStorageNamespace returns the StorageNamespace field value if set, zero value otherwise.
func (o *HelmSpec) GetStorageNamespace() string {
	if o == nil || IsNil(o.StorageNamespace) {
		var ret string
		return ret
	}
	return *o.StorageNamespace
}

// GetStorageNamespaceOk returns a tuple with the StorageNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmSpec) GetStorageNamespaceOk() (*string, bool) {
	if o == nil || IsNil(o.StorageNamespace) {
		return nil, false
	}
	return o.StorageNamespace, true
}

// HasStorageNamespace returns a boolean if a field has been set.
func (o *HelmSpec) HasStorageNamespace() bool {
	if o != nil && !IsNil(o.StorageNamespace) {
		return true
	}

	return false
}

// SetStorageNamespace gets a reference to the given string and assigns it to the StorageNamespace field.
func (o *HelmSpec) SetStorageNamespace(v string) {
	o.StorageNamespace = &v
}

// GetChart returns the Chart field value if set, zero value otherwise.
func (o *HelmSpec) GetChart() Chart {
	if o == nil || IsNil(o.Chart) {
		var ret Chart
		return ret
	}
	return *o.Chart
}

// GetChartOk returns a tuple with the Chart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmSpec) GetChartOk() (*Chart, bool) {
	if o == nil || IsNil(o.Chart) {
		return nil, false
	}
	return o.Chart, true
}

// HasChart returns a boolean if a field has been set.
func (o *HelmSpec) HasChart() bool {
	if o != nil && !IsNil(o.Chart) {
		return true
	}

	return false
}

// SetChart gets a reference to the given Chart and assigns it to the Chart field.
func (o *HelmSpec) SetChart(v Chart) {
	o.Chart = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *HelmSpec) GetValues() JsonNode {
	if o == nil || IsNil(o.Values) {
		var ret JsonNode
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmSpec) GetValuesOk() (*JsonNode, bool) {
	if o == nil || IsNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *HelmSpec) HasValues() bool {
	if o != nil && !IsNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given JsonNode and assigns it to the Values field.
func (o *HelmSpec) SetValues(v JsonNode) {
	o.Values = &v
}

func (o HelmSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Interval) {
		toSerialize["interval"] = o.Interval
	}
	if !IsNil(o.ReleaseName) {
		toSerialize["releaseName"] = o.ReleaseName
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.TargetNamespace) {
		toSerialize["targetNamespace"] = o.TargetNamespace
	}
	if !IsNil(o.StorageNamespace) {
		toSerialize["storageNamespace"] = o.StorageNamespace
	}
	if !IsNil(o.Chart) {
		toSerialize["chart"] = o.Chart
	}
	if !IsNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableHelmSpec struct {
	value *HelmSpec
	isSet bool
}

func (v NullableHelmSpec) Get() *HelmSpec {
	return v.value
}

func (v *NullableHelmSpec) Set(val *HelmSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmSpec(val *HelmSpec) *NullableHelmSpec {
	return &NullableHelmSpec{value: val, isSet: true}
}

func (v NullableHelmSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


