/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@itera.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
	"fmt"
)

// ProxmoxRole the model 'ProxmoxRole'
type ProxmoxRole int32

// List of ProxmoxRole
const (
	PROXMOXROLE__0 ProxmoxRole = 0
	PROXMOXROLE__100 ProxmoxRole = 100
)

// All allowed values of ProxmoxRole enum
var AllowedProxmoxRoleEnumValues = []ProxmoxRole{
	0,
	100,
}

func (v *ProxmoxRole) UnmarshalJSON(src []byte) error {
	var value int32
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ProxmoxRole(value)
	for _, existing := range AllowedProxmoxRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ProxmoxRole", value)
}

// NewProxmoxRoleFromValue returns a pointer to a valid ProxmoxRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProxmoxRoleFromValue(v int32) (*ProxmoxRole, error) {
	ev := ProxmoxRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ProxmoxRole: valid values are %v", v, AllowedProxmoxRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProxmoxRole) IsValid() bool {
	for _, existing := range AllowedProxmoxRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ProxmoxRole value
func (v ProxmoxRole) Ptr() *ProxmoxRole {
	return &v
}

type NullableProxmoxRole struct {
	value *ProxmoxRole
	isSet bool
}

func (v NullableProxmoxRole) Get() *ProxmoxRole {
	return v.value
}

func (v *NullableProxmoxRole) Set(val *ProxmoxRole) {
	v.value = val
	v.isSet = true
}

func (v NullableProxmoxRole) IsSet() bool {
	return v.isSet
}

func (v *NullableProxmoxRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProxmoxRole(val *ProxmoxRole) *NullableProxmoxRole {
	return &NullableProxmoxRole{value: val, isSet: true}
}

func (v NullableProxmoxRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProxmoxRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

