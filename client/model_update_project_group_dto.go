/*
Taikun - WebApi

This Api will be responsible for overall data distribution and authorization.

API version: v1
Contact: noreply@itera.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package taikuncore

import (
	"encoding/json"
)

// checks if the UpdateProjectGroupDto type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateProjectGroupDto{}

// UpdateProjectGroupDto struct for UpdateProjectGroupDto
type UpdateProjectGroupDto struct {
	Name *string `json:"name,omitempty"`
	ProjectIds []int32 `json:"projectIds,omitempty"`
}

// NewUpdateProjectGroupDto instantiates a new UpdateProjectGroupDto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateProjectGroupDto() *UpdateProjectGroupDto {
	this := UpdateProjectGroupDto{}
	return &this
}

// NewUpdateProjectGroupDtoWithDefaults instantiates a new UpdateProjectGroupDto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateProjectGroupDtoWithDefaults() *UpdateProjectGroupDto {
	this := UpdateProjectGroupDto{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UpdateProjectGroupDto) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProjectGroupDto) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UpdateProjectGroupDto) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UpdateProjectGroupDto) SetName(v string) {
	o.Name = &v
}

// GetProjectIds returns the ProjectIds field value if set, zero value otherwise.
func (o *UpdateProjectGroupDto) GetProjectIds() []int32 {
	if o == nil || IsNil(o.ProjectIds) {
		var ret []int32
		return ret
	}
	return o.ProjectIds
}

// GetProjectIdsOk returns a tuple with the ProjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProjectGroupDto) GetProjectIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.ProjectIds) {
		return nil, false
	}
	return o.ProjectIds, true
}

// HasProjectIds returns a boolean if a field has been set.
func (o *UpdateProjectGroupDto) HasProjectIds() bool {
	if o != nil && !IsNil(o.ProjectIds) {
		return true
	}

	return false
}

// SetProjectIds gets a reference to the given []int32 and assigns it to the ProjectIds field.
func (o *UpdateProjectGroupDto) SetProjectIds(v []int32) {
	o.ProjectIds = v
}

func (o UpdateProjectGroupDto) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateProjectGroupDto) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ProjectIds) {
		toSerialize["projectIds"] = o.ProjectIds
	}
	return toSerialize, nil
}

type NullableUpdateProjectGroupDto struct {
	value *UpdateProjectGroupDto
	isSet bool
}

func (v NullableUpdateProjectGroupDto) Get() *UpdateProjectGroupDto {
	return v.value
}

func (v *NullableUpdateProjectGroupDto) Set(val *UpdateProjectGroupDto) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateProjectGroupDto) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateProjectGroupDto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateProjectGroupDto(val *UpdateProjectGroupDto) *NullableUpdateProjectGroupDto {
	return &NullableUpdateProjectGroupDto{value: val, isSet: true}
}

func (v NullableUpdateProjectGroupDto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateProjectGroupDto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


